	.file	"ula.cpp"
	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init,@function
__cxx_global_var_init:                  # @__cxx_global_var_init
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2:
	.cfi_def_cfa_offset 16
.Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZStL8__ioinit, %rdi
	callq	_ZNSt8ios_base4InitC1Ev
	leaq	_ZNSt8ios_base4InitD1Ev, %rdi
	leaq	_ZStL8__ioinit, %rax
	leaq	__dso_handle, %rdx
	movq	%rax, %rsi
	callq	__cxa_atexit
	movl	%eax, -4(%rbp)          # 4-byte Spill
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp5:
	.size	__cxx_global_var_init, .Ltmp5-__cxx_global_var_init
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,"axG",@progbits,_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,comdat
	.weak	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,@function
_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi: # @_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movl	%edx, -20(%rsp)
	ret
.Ltmp6:
	.size	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi, .Ltmp6-_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init1,@function
__cxx_global_var_init1:                 # @__cxx_global_var_init1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	leaq	_ZN7sc_coreL17api_version_checkE, %rdi
	callq	_ZN7sc_core20sc_api_version_2_3_0C1Ev
	popq	%rbp
	ret
.Ltmp12:
	.size	__cxx_global_var_init1, .Ltmp12-__cxx_global_var_init1
	.cfi_endproc

	.text
	.globl	_ZN7ula_new5opUlaEv
	.align	16, 0x90
	.type	_ZN7ula_new5opUlaEv,@function
_ZN7ula_new5opUlaEv:                    # @_ZN7ula_new5opUlaEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin3:
	.cfi_lsda 3, .Lexception3
# BB#0:
	pushq	%rbp
.Ltmp77:
	.cfi_def_cfa_offset 16
.Ltmp78:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp79:
	.cfi_def_cfa_register %rbp
	subq	$336, %rsp              # imm = 0x150
	movq	%rdi, -8(%rbp)
	leaq	-32(%rbp), %rax
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_intILi16EEC1Ev
	movq	-64(%rbp), %rax         # 8-byte Reload
	addq	$496, %rax              # imm = 0x1F0
	movq	-64(%rbp), %rdi         # 8-byte Reload
.Ltmp13:
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv
.Ltmp14:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB3_1
.LBB3_1:
.Ltmp15:
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp16:
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB3_2
.LBB3_2:
	movq	-88(%rbp), %rax         # 8-byte Reload
	decq	%rax
	cmpq	$4, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	ja	.LBB3_37
# BB#44:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	.LJTI3_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB3_3:
.Ltmp71:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp72:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt6sc_intILi16EED1Ev
.Ltmp73:
	jmp	.LBB3_41
.LBB3_4:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp57:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp58:
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB3_5
.LBB3_5:
.Ltmp59:
	movq	-104(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp60:
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB3_6
.LBB3_6:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$352, %rax              # imm = 0x160
.Ltmp61:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp62:
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB3_7
.LBB3_7:
.Ltmp63:
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp64:
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB3_8
.LBB3_8:
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-128(%rbp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
.Ltmp65:
	leaq	-32(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_intILi16EEaSEx
.Ltmp66:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB3_9
.LBB3_9:
	jmp	.LBB3_39
.LBB3_10:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp47:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp48:
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB3_11
.LBB3_11:
.Ltmp49:
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp50:
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB3_12
.LBB3_12:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$352, %rax              # imm = 0x160
.Ltmp51:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp52:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB3_13
.LBB3_13:
.Ltmp53:
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp54:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB3_14
.LBB3_14:
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	-168(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
.Ltmp55:
	leaq	-32(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_intILi16EEaSEx
.Ltmp56:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB3_15
.LBB3_15:
	jmp	.LBB3_39
.LBB3_16:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp37:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp38:
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB3_17
.LBB3_17:
.Ltmp39:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp40:
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jmp	.LBB3_18
.LBB3_18:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$352, %rax              # imm = 0x160
.Ltmp41:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp42:
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB3_19
.LBB3_19:
.Ltmp43:
	movq	-200(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp44:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB3_20
.LBB3_20:
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
.Ltmp45:
	leaq	-32(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_intILi16EEaSEx
.Ltmp46:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB3_21
.LBB3_21:
	jmp	.LBB3_39
.LBB3_22:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp27:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp28:
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jmp	.LBB3_23
.LBB3_23:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$352, %rax              # imm = 0x160
	movq	-224(%rbp), %rcx        # 8-byte Reload
.Ltmp29:
	movq	%rax, %rdi
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp30:
	movq	%rax, -240(%rbp)        # 8-byte Spill
	jmp	.LBB3_24
.LBB3_24:
.Ltmp31:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	callq	_ZN5sc_dtgtERKNS_11sc_int_baseES2_
.Ltmp32:
	movb	%al, -241(%rbp)         # 1-byte Spill
	jmp	.LBB3_25
.LBB3_25:
	movb	-241(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_26
	jmp	.LBB3_28
.LBB3_26:
.Ltmp35:
	leaq	-32(%rbp), %rdi
	movl	$1, %esi
	callq	_ZN5sc_dt6sc_intILi16EEaSEi
.Ltmp36:
	movq	%rax, -256(%rbp)        # 8-byte Spill
	jmp	.LBB3_27
.LBB3_27:
	jmp	.LBB3_30
.LBB3_28:
.Ltmp33:
	leaq	-32(%rbp), %rdi
	xorl	%esi, %esi
	callq	_ZN5sc_dt6sc_intILi16EEaSEi
.Ltmp34:
	movq	%rax, -264(%rbp)        # 8-byte Spill
	jmp	.LBB3_29
.LBB3_29:
	jmp	.LBB3_30
.LBB3_30:
	jmp	.LBB3_39
.LBB3_31:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp17:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp18:
	movq	%rax, -272(%rbp)        # 8-byte Spill
	jmp	.LBB3_32
.LBB3_32:
.Ltmp19:
	movq	-272(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp20:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	jmp	.LBB3_33
.LBB3_33:
	movq	-280(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	-72(%rbp), %rdx         # 8-byte Reload
	addq	$352, %rdx              # imm = 0x160
.Ltmp21:
	movq	%rdx, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
.Ltmp22:
	movq	%rax, -288(%rbp)        # 8-byte Spill
	jmp	.LBB3_34
.LBB3_34:
.Ltmp23:
	movq	-288(%rbp), %rdi        # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_basecvxEv
.Ltmp24:
	movq	%rax, -296(%rbp)        # 8-byte Spill
	jmp	.LBB3_35
.LBB3_35:
	movq	-296(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movl	-36(%rbp), %edx
	andl	%ecx, %edx
.Ltmp25:
	leaq	-32(%rbp), %rdi
	movl	%edx, %esi
	callq	_ZN5sc_dt6sc_intILi16EEaSEi
.Ltmp26:
	movq	%rax, -304(%rbp)        # 8-byte Spill
	jmp	.LBB3_36
.LBB3_36:
	jmp	.LBB3_39
.LBB3_37:
.Ltmp67:
	leaq	-32(%rbp), %rdi
	xorl	%esi, %esi
	callq	_ZN5sc_dt6sc_intILi16EEaSEi
.Ltmp68:
	movq	%rax, -312(%rbp)        # 8-byte Spill
	jmp	.LBB3_38
.LBB3_38:
	jmp	.LBB3_39
.LBB3_39:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$640, %rax              # imm = 0x280
.Ltmp69:
	leaq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_
.Ltmp70:
	jmp	.LBB3_40
.LBB3_40:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt6sc_intILi16EED1Ev
	addq	$336, %rsp              # imm = 0x150
	popq	%rbp
	ret
.LBB3_41:
	jmp	.LBB3_42
.LBB3_42:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB3_43:
.Ltmp74:
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp80:
	.size	_ZN7ula_new5opUlaEv, .Ltmp80-_ZN7ula_new5opUlaEv
	.cfi_endproc
.Leh_func_end3:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table3:
.Lexception3:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset0 = .Leh_func_begin3-.Leh_func_begin3 # >> Call Site 1 <<
	.long	.Lset0
.Lset1 = .Ltmp13-.Leh_func_begin3       #   Call between .Leh_func_begin3 and .Ltmp13
	.long	.Lset1
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset2 = .Ltmp13-.Leh_func_begin3       # >> Call Site 2 <<
	.long	.Lset2
.Lset3 = .Ltmp16-.Ltmp13                #   Call between .Ltmp13 and .Ltmp16
	.long	.Lset3
.Lset4 = .Ltmp71-.Leh_func_begin3       #     jumps to .Ltmp71
	.long	.Lset4
	.byte	0                       #   On action: cleanup
.Lset5 = .Ltmp72-.Leh_func_begin3       # >> Call Site 3 <<
	.long	.Lset5
.Lset6 = .Ltmp73-.Ltmp72                #   Call between .Ltmp72 and .Ltmp73
	.long	.Lset6
.Lset7 = .Ltmp74-.Leh_func_begin3       #     jumps to .Ltmp74
	.long	.Lset7
	.byte	1                       #   On action: 1
.Lset8 = .Ltmp57-.Leh_func_begin3       # >> Call Site 4 <<
	.long	.Lset8
.Lset9 = .Ltmp70-.Ltmp57                #   Call between .Ltmp57 and .Ltmp70
	.long	.Lset9
.Lset10 = .Ltmp71-.Leh_func_begin3      #     jumps to .Ltmp71
	.long	.Lset10
	.byte	0                       #   On action: cleanup
.Lset11 = .Ltmp70-.Leh_func_begin3      # >> Call Site 5 <<
	.long	.Lset11
.Lset12 = .Leh_func_end3-.Ltmp70        #   Call between .Ltmp70 and .Leh_func_end3
	.long	.Lset12
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4
	.section	.rodata,"a",@progbits
	.align	8
.LJTI3_0:
	.quad	.LBB3_4
	.quad	.LBB3_10
	.quad	.LBB3_16
	.quad	.LBB3_22
	.quad	.LBB3_31

	.section	.text._ZN5sc_dt6sc_intILi16EEC1Ev,"axG",@progbits,_ZN5sc_dt6sc_intILi16EEC1Ev,comdat
	.weak	_ZN5sc_dt6sc_intILi16EEC1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi16EEC1Ev,@function
_ZN5sc_dt6sc_intILi16EEC1Ev:            # @_ZN5sc_dt6sc_intILi16EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp83:
	.cfi_def_cfa_offset 16
.Ltmp84:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp85:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt6sc_intILi16EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp86:
	.size	_ZN5sc_dt6sc_intILi16EEC1Ev, .Ltmp86-_ZN5sc_dt6sc_intILi16EEC1Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp89:
	.cfi_def_cfa_offset 16
.Ltmp90:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp91:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp92:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv, .Ltmp92-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi3EEEE4readEv
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_basecvyEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_basecvyEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_basecvyEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_basecvyEv,@function
_ZNK5sc_dt12sc_uint_basecvyEv:          # @_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp93:
	.size	_ZNK5sc_dt12sc_uint_basecvyEv, .Ltmp93-_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_intILi16EEaSEx,"axG",@progbits,_ZN5sc_dt6sc_intILi16EEaSEx,comdat
	.weak	_ZN5sc_dt6sc_intILi16EEaSEx
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi16EEaSEx,@function
_ZN5sc_dt6sc_intILi16EEaSEx:            # @_ZN5sc_dt6sc_intILi16EEaSEx
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp96:
	.cfi_def_cfa_offset 16
.Ltmp97:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp98:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt11sc_int_baseaSEx
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp99:
	.size	_ZN5sc_dt6sc_intILi16EEaSEx, .Ltmp99-_ZN5sc_dt6sc_intILi16EEaSEx
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp102:
	.cfi_def_cfa_offset 16
.Ltmp103:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp104:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp105:
	.size	_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv, .Ltmp105-_ZNK7sc_core5sc_inIN5sc_dt6sc_intILi16EEEE4readEv
	.cfi_endproc

	.section	.text._ZNK5sc_dt11sc_int_basecvxEv,"axG",@progbits,_ZNK5sc_dt11sc_int_basecvxEv,comdat
	.weak	_ZNK5sc_dt11sc_int_basecvxEv
	.align	16, 0x90
	.type	_ZNK5sc_dt11sc_int_basecvxEv,@function
_ZNK5sc_dt11sc_int_basecvxEv:           # @_ZNK5sc_dt11sc_int_basecvxEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp106:
	.size	_ZNK5sc_dt11sc_int_basecvxEv, .Ltmp106-_ZNK5sc_dt11sc_int_basecvxEv
	.cfi_endproc

	.section	.text._ZN5sc_dtgtERKNS_11sc_int_baseES2_,"axG",@progbits,_ZN5sc_dtgtERKNS_11sc_int_baseES2_,comdat
	.weak	_ZN5sc_dtgtERKNS_11sc_int_baseES2_
	.align	16, 0x90
	.type	_ZN5sc_dtgtERKNS_11sc_int_baseES2_,@function
_ZN5sc_dtgtERKNS_11sc_int_baseES2_:     # @_ZN5sc_dtgtERKNS_11sc_int_baseES2_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	8(%rsi), %rsi
	movq	-16(%rsp), %rdi
	cmpq	8(%rdi), %rsi
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	ret
.Ltmp107:
	.size	_ZN5sc_dtgtERKNS_11sc_int_baseES2_, .Ltmp107-_ZN5sc_dtgtERKNS_11sc_int_baseES2_
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_intILi16EEaSEi,"axG",@progbits,_ZN5sc_dt6sc_intILi16EEaSEi,comdat
	.weak	_ZN5sc_dt6sc_intILi16EEaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi16EEaSEi,@function
_ZN5sc_dt6sc_intILi16EEaSEi:            # @_ZN5sc_dt6sc_intILi16EEaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp110:
	.cfi_def_cfa_offset 16
.Ltmp111:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp112:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movl	-12(%rbp), %esi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt11sc_int_baseaSEi
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp113:
	.size	_ZN5sc_dt6sc_intILi16EEaSEi, .Ltmp113-_ZN5sc_dt6sc_intILi16EEaSEi
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_,@function
_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_: # @_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp116:
	.cfi_def_cfa_offset 16
.Ltmp117:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp118:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	movq	%rax, %rsi
	addq	$8, %rsi
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp119:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_, .Ltmp119-_ZN7sc_core8sc_inoutIN5sc_dt6sc_intILi16EEEE5writeERKS3_
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_intILi16EED1Ev,"axG",@progbits,_ZN5sc_dt6sc_intILi16EED1Ev,comdat
	.weak	_ZN5sc_dt6sc_intILi16EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi16EED1Ev,@function
_ZN5sc_dt6sc_intILi16EED1Ev:            # @_ZN5sc_dt6sc_intILi16EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp122:
	.cfi_def_cfa_offset 16
.Ltmp123:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp124:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt6sc_intILi16EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp125:
	.size	_ZN5sc_dt6sc_intILi16EED1Ev, .Ltmp125-_ZN5sc_dt6sc_intILi16EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD1Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD1Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD1Ev,@function
_ZN7sc_core18sc_process_monitorD1Ev:    # @_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp128:
	.cfi_def_cfa_offset 16
.Ltmp129:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp130:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core18sc_process_monitorD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp131:
	.size	_ZN7sc_core18sc_process_monitorD1Ev, .Ltmp131-_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD0Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD0Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD0Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD0Ev,@function
_ZN7sc_core18sc_process_monitorD0Ev:    # @_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin15:
	.cfi_lsda 3, .Lexception15
# BB#0:
	pushq	%rbp
.Ltmp137:
	.cfi_def_cfa_offset 16
.Ltmp138:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp139:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp132:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core18sc_process_monitorD1Ev
.Ltmp133:
	jmp	.LBB15_1
.LBB15_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB15_2:
.Ltmp134:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp140:
	.size	_ZN7sc_core18sc_process_monitorD0Ev, .Ltmp140-_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_endproc
.Leh_func_end15:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table15:
.Lexception15:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset13 = .Ltmp132-.Leh_func_begin15    # >> Call Site 1 <<
	.long	.Lset13
.Lset14 = .Ltmp133-.Ltmp132             #   Call between .Ltmp132 and .Ltmp133
	.long	.Lset14
.Lset15 = .Ltmp134-.Leh_func_begin15    #     jumps to .Ltmp134
	.long	.Lset15
	.byte	0                       #   On action: cleanup
.Lset16 = .Ltmp133-.Leh_func_begin15    # >> Call Site 2 <<
	.long	.Lset16
.Lset17 = .Leh_func_end15-.Ltmp133      #   Call between .Ltmp133 and .Leh_func_end15
	.long	.Lset17
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp143:
	.cfi_def_cfa_offset 16
.Ltmp144:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp145:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB16_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB16_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp146:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv, .Ltmp146-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt11sc_int_baseaSEi,"axG",@progbits,_ZN5sc_dt11sc_int_baseaSEi,comdat
	.weak	_ZN5sc_dt11sc_int_baseaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt11sc_int_baseaSEi,@function
_ZN5sc_dt11sc_int_baseaSEi:             # @_ZN5sc_dt11sc_int_baseaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp149:
	.cfi_def_cfa_offset 16
.Ltmp150:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp151:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movslq	-12(%rbp), %rax
	movq	%rax, 8(%rdi)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt11sc_int_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp152:
	.size	_ZN5sc_dt11sc_int_baseaSEi, .Ltmp152-_ZN5sc_dt11sc_int_baseaSEi
	.cfi_endproc

	.section	.text._ZN5sc_dt11sc_int_base11extend_signEv,"axG",@progbits,_ZN5sc_dt11sc_int_base11extend_signEv,comdat
	.weak	_ZN5sc_dt11sc_int_base11extend_signEv
	.align	16, 0x90
	.type	_ZN5sc_dt11sc_int_base11extend_signEv,@function
_ZN5sc_dt11sc_int_base11extend_signEv:  # @_ZN5sc_dt11sc_int_base11extend_signEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movl	20(%rdi), %ecx
                                        # kill: CL<def> RCX<kill>
	shlq	%cl, %rax
	movl	20(%rdi), %ecx
                                        # kill: CL<def> RCX<kill>
	sarq	%cl, %rax
	movq	%rax, 8(%rdi)
	ret
.Ltmp153:
	.size	_ZN5sc_dt11sc_int_base11extend_signEv, .Ltmp153-_ZN5sc_dt11sc_int_base11extend_signEv
	.cfi_endproc

	.section	.text._ZN5sc_dt11sc_int_baseaSEx,"axG",@progbits,_ZN5sc_dt11sc_int_baseaSEx,comdat
	.weak	_ZN5sc_dt11sc_int_baseaSEx
	.align	16, 0x90
	.type	_ZN5sc_dt11sc_int_baseaSEx,@function
_ZN5sc_dt11sc_int_baseaSEx:             # @_ZN5sc_dt11sc_int_baseaSEx
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp156:
	.cfi_def_cfa_offset 16
.Ltmp157:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp158:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, 8(%rsi)
	movq	%rsi, %rdi
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt11sc_int_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp159:
	.size	_ZN5sc_dt11sc_int_baseaSEx, .Ltmp159-_ZN5sc_dt11sc_int_baseaSEx
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp162:
	.cfi_def_cfa_offset 16
.Ltmp163:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp164:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB20_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB20_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp165:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv, .Ltmp165-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt6sc_intILi16EEEEEEptEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp168:
	.cfi_def_cfa_offset 16
.Ltmp169:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp170:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB21_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB21_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp171:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv, .Ltmp171-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi3EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_intILi16EEC2Ev,"axG",@progbits,_ZN5sc_dt6sc_intILi16EEC2Ev,comdat
	.weak	_ZN5sc_dt6sc_intILi16EEC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi16EEC2Ev,@function
_ZN5sc_dt6sc_intILi16EEC2Ev:            # @_ZN5sc_dt6sc_intILi16EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp174:
	.cfi_def_cfa_offset 16
.Ltmp175:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp176:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$16, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt11sc_int_baseC2Ei
	leaq	_ZTVN5sc_dt6sc_intILi16EEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp177:
	.size	_ZN5sc_dt6sc_intILi16EEC2Ev, .Ltmp177-_ZN5sc_dt6sc_intILi16EEC2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt11sc_int_baseC2Ei,"axG",@progbits,_ZN5sc_dt11sc_int_baseC2Ei,comdat
	.weak	_ZN5sc_dt11sc_int_baseC2Ei
	.align	16, 0x90
	.type	_ZN5sc_dt11sc_int_baseC2Ei,@function
_ZN5sc_dt11sc_int_baseC2Ei:             # @_ZN5sc_dt11sc_int_baseC2Ei
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin23:
	.cfi_lsda 3, .Lexception23
# BB#0:
	pushq	%rbp
.Ltmp186:
	.cfi_def_cfa_offset 16
.Ltmp187:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp188:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt13sc_value_baseC2Ev
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt11sc_int_baseE+16, (%rdi)
	movq	$0, 8(%rdi)
	movl	-12(%rbp), %esi
	movl	%esi, 16(%rdi)
	movl	$64, %eax
	subl	%esi, %eax
	movl	%eax, 20(%rdi)
.Ltmp178:
	callq	_ZNK5sc_dt11sc_int_base12check_lengthEv
.Ltmp179:
	jmp	.LBB23_1
.LBB23_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB23_2:
.Ltmp180:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp181:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt13sc_value_baseD2Ev
.Ltmp182:
	jmp	.LBB23_3
.LBB23_3:
	jmp	.LBB23_4
.LBB23_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB23_5:
.Ltmp183:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp189:
	.size	_ZN5sc_dt11sc_int_baseC2Ei, .Ltmp189-_ZN5sc_dt11sc_int_baseC2Ei
	.cfi_endproc
.Leh_func_end23:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table23:
.Lexception23:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset18 = .Ltmp178-.Leh_func_begin23    # >> Call Site 1 <<
	.long	.Lset18
.Lset19 = .Ltmp179-.Ltmp178             #   Call between .Ltmp178 and .Ltmp179
	.long	.Lset19
.Lset20 = .Ltmp180-.Leh_func_begin23    #     jumps to .Ltmp180
	.long	.Lset20
	.byte	0                       #   On action: cleanup
.Lset21 = .Ltmp181-.Leh_func_begin23    # >> Call Site 2 <<
	.long	.Lset21
.Lset22 = .Ltmp182-.Ltmp181             #   Call between .Ltmp181 and .Ltmp182
	.long	.Lset22
.Lset23 = .Ltmp183-.Leh_func_begin23    #     jumps to .Ltmp183
	.long	.Lset23
	.byte	1                       #   On action: 1
.Lset24 = .Ltmp182-.Leh_func_begin23    # >> Call Site 3 <<
	.long	.Lset24
.Lset25 = .Leh_func_end23-.Ltmp182      #   Call between .Ltmp182 and .Leh_func_end23
	.long	.Lset25
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK5sc_dt11sc_int_base17concat_get_uint64Ev,"axG",@progbits,_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev,comdat
	.weak	_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev
	.align	16, 0x90
	.type	_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev,@function
_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev: # @_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -16(%rsp)
	movq	-16(%rsp), %rdi
	cmpl	$64, 16(%rdi)
	movq	%rdi, -24(%rsp)         # 8-byte Spill
	jge	.LBB24_2
# BB#1:
	movq	-24(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	movl	16(%rax), %edx
	movq	%rcx, -32(%rsp)         # 8-byte Spill
	movq	%rdx, %rcx
                                        # kill: CL<def> RCX<kill>
	movabsq	$-1, %rdx
	shlq	%cl, %rdx
	xorq	$-1, %rdx
	movq	-32(%rsp), %rsi         # 8-byte Reload
	andq	%rdx, %rsi
	movq	%rsi, -8(%rsp)
	jmp	.LBB24_3
.LBB24_2:
	movq	-24(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, -8(%rsp)
.LBB24_3:
	movq	-8(%rsp), %rax
	ret
.Ltmp190:
	.size	_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev, .Ltmp190-_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt11sc_int_base13concat_lengthEPb,"axG",@progbits,_ZNK5sc_dt11sc_int_base13concat_lengthEPb,comdat
	.weak	_ZNK5sc_dt11sc_int_base13concat_lengthEPb
	.align	16, 0x90
	.type	_ZNK5sc_dt11sc_int_base13concat_lengthEPb,@function
_ZNK5sc_dt11sc_int_base13concat_lengthEPb: # @_ZNK5sc_dt11sc_int_base13concat_lengthEPb
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp193:
	.cfi_def_cfa_offset 16
.Ltmp194:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp195:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, -16(%rbp)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	je	.LBB25_2
# BB#1:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
.LBB25_2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_base6lengthEv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp196:
	.size	_ZNK5sc_dt11sc_int_base13concat_lengthEPb, .Ltmp196-_ZNK5sc_dt11sc_int_base13concat_lengthEPb
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_intILi16EED0Ev,"axG",@progbits,_ZN5sc_dt6sc_intILi16EED0Ev,comdat
	.weak	_ZN5sc_dt6sc_intILi16EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi16EED0Ev,@function
_ZN5sc_dt6sc_intILi16EED0Ev:            # @_ZN5sc_dt6sc_intILi16EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin26:
	.cfi_lsda 3, .Lexception26
# BB#0:
	pushq	%rbp
.Ltmp202:
	.cfi_def_cfa_offset 16
.Ltmp203:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp204:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp197:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt6sc_intILi16EED1Ev
.Ltmp198:
	jmp	.LBB26_1
.LBB26_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB26_2:
.Ltmp199:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp205:
	.size	_ZN5sc_dt6sc_intILi16EED0Ev, .Ltmp205-_ZN5sc_dt6sc_intILi16EED0Ev
	.cfi_endproc
.Leh_func_end26:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table26:
.Lexception26:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset26 = .Ltmp197-.Leh_func_begin26    # >> Call Site 1 <<
	.long	.Lset26
.Lset27 = .Ltmp198-.Ltmp197             #   Call between .Ltmp197 and .Ltmp198
	.long	.Lset27
.Lset28 = .Ltmp199-.Leh_func_begin26    #     jumps to .Ltmp199
	.long	.Lset28
	.byte	0                       #   On action: cleanup
.Lset29 = .Ltmp198-.Leh_func_begin26    # >> Call Site 2 <<
	.long	.Lset29
.Lset30 = .Leh_func_end26-.Ltmp198      #   Call between .Ltmp198 and .Leh_func_end26
	.long	.Lset30
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK5sc_dt11sc_int_base6lengthEv,"axG",@progbits,_ZNK5sc_dt11sc_int_base6lengthEv,comdat
	.weak	_ZNK5sc_dt11sc_int_base6lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt11sc_int_base6lengthEv,@function
_ZNK5sc_dt11sc_int_base6lengthEv:       # @_ZNK5sc_dt11sc_int_base6lengthEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movl	16(%rdi), %eax
	ret
.Ltmp206:
	.size	_ZNK5sc_dt11sc_int_base6lengthEv, .Ltmp206-_ZNK5sc_dt11sc_int_base6lengthEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseC2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseC2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseC2Ev,@function
_ZN5sc_dt13sc_value_baseC2Ev:           # @_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_startproc
# BB#0:
	leaq	_ZTVN5sc_dt13sc_value_baseE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rax, (%rdi)
	ret
.Ltmp207:
	.size	_ZN5sc_dt13sc_value_baseC2Ev, .Ltmp207-_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt11sc_int_base12check_lengthEv,"axG",@progbits,_ZNK5sc_dt11sc_int_base12check_lengthEv,comdat
	.weak	_ZNK5sc_dt11sc_int_base12check_lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt11sc_int_base12check_lengthEv,@function
_ZNK5sc_dt11sc_int_base12check_lengthEv: # @_ZNK5sc_dt11sc_int_base12check_lengthEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp210:
	.cfi_def_cfa_offset 16
.Ltmp211:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp212:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 16(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jle	.LBB29_2
# BB#1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	cmpl	$64, 16(%rax)
	jle	.LBB29_3
.LBB29_2:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt11sc_int_base14invalid_lengthEv
.LBB29_3:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp213:
	.size	_ZNK5sc_dt11sc_int_base12check_lengthEv, .Ltmp213-_ZNK5sc_dt11sc_int_base12check_lengthEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseD2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseD2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseD2Ev,@function
_ZN5sc_dt13sc_value_baseD2Ev:           # @_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp214:
	.size	_ZN5sc_dt13sc_value_baseD2Ev, .Ltmp214-_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD2Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD2Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD2Ev,@function
_ZN7sc_core18sc_process_monitorD2Ev:    # @_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp215:
	.size	_ZN7sc_core18sc_process_monitorD2Ev, .Ltmp215-_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_intILi16EED2Ev,"axG",@progbits,_ZN5sc_dt6sc_intILi16EED2Ev,comdat
	.weak	_ZN5sc_dt6sc_intILi16EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_intILi16EED2Ev,@function
_ZN5sc_dt6sc_intILi16EED2Ev:            # @_ZN5sc_dt6sc_intILi16EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp218:
	.cfi_def_cfa_offset 16
.Ltmp219:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp220:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt11sc_int_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp221:
	.size	_ZN5sc_dt6sc_intILi16EED2Ev, .Ltmp221-_ZN5sc_dt6sc_intILi16EED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt11sc_int_baseD2Ev,"axG",@progbits,_ZN5sc_dt11sc_int_baseD2Ev,comdat
	.weak	_ZN5sc_dt11sc_int_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt11sc_int_baseD2Ev,@function
_ZN5sc_dt11sc_int_baseD2Ev:             # @_ZN5sc_dt11sc_int_baseD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp224:
	.cfi_def_cfa_offset 16
.Ltmp225:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp226:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt13sc_value_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp227:
	.size	_ZN5sc_dt11sc_int_baseD2Ev, .Ltmp227-_ZN5sc_dt11sc_int_baseD2Ev
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	_GLOBAL__I_a,@function
_GLOBAL__I_a:                           # @_GLOBAL__I_a
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp230:
	.cfi_def_cfa_offset 16
.Ltmp231:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp232:
	.cfi_def_cfa_register %rbp
	callq	__cxx_global_var_init
	callq	__cxx_global_var_init1
	popq	%rbp
	ret
.Ltmp233:
	.size	_GLOBAL__I_a, .Ltmp233-_GLOBAL__I_a
	.cfi_endproc

	.type	_ZStL8__ioinit,@object  # @_ZStL8__ioinit
	.local	_ZStL8__ioinit
	.comm	_ZStL8__ioinit,1,1
	.type	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE,@object # @_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE
	.section	.rodata,"a",@progbits
_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE:
	.byte	1                       # 0x1
	.size	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE, 1

	.type	_ZN7sc_coreL17api_version_checkE,@object # @_ZN7sc_coreL17api_version_checkE
	.local	_ZN7sc_coreL17api_version_checkE
	.comm	_ZN7sc_coreL17api_version_checkE,1,1
	.type	_ZTVN7sc_core18sc_process_monitorE,@object # @_ZTVN7sc_core18sc_process_monitorE
	.section	.rodata._ZTVN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTVN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTVN7sc_core18sc_process_monitorE
	.align	16
_ZTVN7sc_core18sc_process_monitorE:
	.quad	0
	.quad	_ZTIN7sc_core18sc_process_monitorE
	.quad	_ZN7sc_core18sc_process_monitorD1Ev
	.quad	_ZN7sc_core18sc_process_monitorD0Ev
	.quad	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.size	_ZTVN7sc_core18sc_process_monitorE, 40

	.type	_ZTSN7sc_core18sc_process_monitorE,@object # @_ZTSN7sc_core18sc_process_monitorE
	.section	.rodata._ZTSN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTSN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTSN7sc_core18sc_process_monitorE
	.align	16
_ZTSN7sc_core18sc_process_monitorE:
	.asciz	 "N7sc_core18sc_process_monitorE"
	.size	_ZTSN7sc_core18sc_process_monitorE, 31

	.type	_ZTIN7sc_core18sc_process_monitorE,@object # @_ZTIN7sc_core18sc_process_monitorE
	.section	.rodata._ZTIN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTIN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTIN7sc_core18sc_process_monitorE
	.align	8
_ZTIN7sc_core18sc_process_monitorE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_process_monitorE
	.size	_ZTIN7sc_core18sc_process_monitorE, 16

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	 "port is not bound"
	.size	.L.str, 18

	.type	_ZTVN5sc_dt6sc_intILi16EEE,@object # @_ZTVN5sc_dt6sc_intILi16EEE
	.section	.rodata._ZTVN5sc_dt6sc_intILi16EEE,"aG",@progbits,_ZTVN5sc_dt6sc_intILi16EEE,comdat
	.weak	_ZTVN5sc_dt6sc_intILi16EEE
	.align	16
_ZTVN5sc_dt6sc_intILi16EEE:
	.quad	0
	.quad	_ZTIN5sc_dt6sc_intILi16EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt11sc_int_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt11sc_int_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt11sc_int_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt11sc_int_base13concat_lengthEPb
	.quad	_ZN5sc_dt11sc_int_base10concat_setExi
	.quad	_ZN5sc_dt11sc_int_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt11sc_int_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt11sc_int_base10concat_setEyi
	.quad	_ZN5sc_dt6sc_intILi16EED1Ev
	.quad	_ZN5sc_dt6sc_intILi16EED0Ev
	.size	_ZTVN5sc_dt6sc_intILi16EEE, 104

	.type	_ZTSN5sc_dt6sc_intILi16EEE,@object # @_ZTSN5sc_dt6sc_intILi16EEE
	.section	.rodata._ZTSN5sc_dt6sc_intILi16EEE,"aG",@progbits,_ZTSN5sc_dt6sc_intILi16EEE,comdat
	.weak	_ZTSN5sc_dt6sc_intILi16EEE
	.align	16
_ZTSN5sc_dt6sc_intILi16EEE:
	.asciz	 "N5sc_dt6sc_intILi16EEE"
	.size	_ZTSN5sc_dt6sc_intILi16EEE, 23

	.type	_ZTIN5sc_dt6sc_intILi16EEE,@object # @_ZTIN5sc_dt6sc_intILi16EEE
	.section	.rodata._ZTIN5sc_dt6sc_intILi16EEE,"aG",@progbits,_ZTIN5sc_dt6sc_intILi16EEE,comdat
	.weak	_ZTIN5sc_dt6sc_intILi16EEE
	.align	16
_ZTIN5sc_dt6sc_intILi16EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt6sc_intILi16EEE
	.quad	_ZTIN5sc_dt11sc_int_baseE
	.size	_ZTIN5sc_dt6sc_intILi16EEE, 24

	.section	.ctors,"aw",@progbits
	.align	8
	.quad	_GLOBAL__I_a

	.section	".note.GNU-stack","",@progbits
