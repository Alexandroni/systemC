-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ula_new_opUla is
port (
    A : IN STD_LOGIC;
    B : IN STD_LOGIC;
    op : IN STD_LOGIC_VECTOR (1 downto 0);
    C : OUT STD_LOGIC;
    C_ap_vld : OUT STD_LOGIC;
    carryOut : OUT STD_LOGIC;
    carryOut_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ula_new_opUla is 
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal aux_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_v_phi_fu_101_p14 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_V_read_fu_66_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_v_1_phi_fu_126_p14 : STD_LOGIC_VECTOR (0 downto 0);
    signal aux_fu_150_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal aux_fu_150_p1 : STD_LOGIC_VECTOR (0 downto 0);


begin



    C <= ap_phi_mux_v_phi_fu_101_p14(0);
    C_ap_vld <= ap_const_logic_1;

    ap_phi_mux_v_1_phi_fu_126_p14_assign_proc : process(B, val_V_read_fu_66_p2, grp_read_fu_72_p2)
    begin
        if (((val_V_read_fu_66_p2 = ap_const_lv2_0) or ((grp_read_fu_72_p2 = ap_const_lv1_0) and (val_V_read_fu_66_p2 = ap_const_lv2_3)) or ((grp_read_fu_72_p2 = ap_const_lv1_0) and (val_V_read_fu_66_p2 = ap_const_lv2_2)) or ((grp_read_fu_72_p2 = ap_const_lv1_1) and (val_V_read_fu_66_p2 = ap_const_lv2_3)) or ((grp_read_fu_72_p2 = ap_const_lv1_1) and (val_V_read_fu_66_p2 = ap_const_lv2_2)) or ((grp_read_fu_72_p2 = ap_const_lv1_0) and (val_V_read_fu_66_p2 = ap_const_lv2_1)))) then 
            ap_phi_mux_v_1_phi_fu_126_p14 <= ap_const_lv1_0;
        elsif (((grp_read_fu_72_p2 = ap_const_lv1_1) and (val_V_read_fu_66_p2 = ap_const_lv2_1))) then 
            ap_phi_mux_v_1_phi_fu_126_p14 <= (0=>B, others=>'-');
        else 
            ap_phi_mux_v_1_phi_fu_126_p14 <= "X";
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_101_p14_assign_proc : process(B, aux_fu_150_p2, val_V_read_fu_66_p2, grp_read_fu_72_p2)
    begin
        if (((grp_read_fu_72_p2 = ap_const_lv1_1) and (val_V_read_fu_66_p2 = ap_const_lv2_3))) then 
            ap_phi_mux_v_phi_fu_101_p14 <= ap_const_lv1_1;
        elsif (((val_V_read_fu_66_p2 = ap_const_lv2_0) or ((grp_read_fu_72_p2 = ap_const_lv1_0) and (val_V_read_fu_66_p2 = ap_const_lv2_2)))) then 
            ap_phi_mux_v_phi_fu_101_p14 <= ap_const_lv1_0;
        elsif ((((grp_read_fu_72_p2 = ap_const_lv1_0) and (val_V_read_fu_66_p2 = ap_const_lv2_3)) or ((grp_read_fu_72_p2 = ap_const_lv1_1) and (val_V_read_fu_66_p2 = ap_const_lv2_2)))) then 
            ap_phi_mux_v_phi_fu_101_p14 <= (0=>B, others=>'-');
        elsif ((((grp_read_fu_72_p2 = ap_const_lv1_0) and (val_V_read_fu_66_p2 = ap_const_lv2_1)) or ((grp_read_fu_72_p2 = ap_const_lv1_1) and (val_V_read_fu_66_p2 = ap_const_lv2_1)))) then 
            ap_phi_mux_v_phi_fu_101_p14 <= aux_fu_150_p2;
        else 
            ap_phi_mux_v_phi_fu_101_p14 <= "X";
        end if; 
    end process;

    aux_fu_150_p0 <= (0=>A, others=>'-');
    aux_fu_150_p1 <= (0=>B, others=>'-');
    aux_fu_150_p2 <= (aux_fu_150_p0 xor aux_fu_150_p1);
    carryOut <= ap_phi_mux_v_1_phi_fu_126_p14(0);
    carryOut_ap_vld <= ap_const_logic_1;
    grp_read_fu_72_p2 <= (0=>A, others=>'-');
    val_V_read_fu_66_p2 <= op;
end behav;
