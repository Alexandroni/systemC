// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ula_new_opUla.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool ula_new_opUla::ap_const_boolean_1 = true;
const sc_lv<2> ula_new_opUla::ap_const_lv2_1 = "1";
const sc_lv<1> ula_new_opUla::ap_const_lv1_1 = "1";
const sc_lv<2> ula_new_opUla::ap_const_lv2_2 = "10";
const sc_lv<2> ula_new_opUla::ap_const_lv2_3 = "11";
const sc_lv<1> ula_new_opUla::ap_const_lv1_0 = "0";
const sc_lv<2> ula_new_opUla::ap_const_lv2_0 = "00";
const sc_logic ula_new_opUla::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic ula_new_opUla::ap_const_logic_1 = sc_dt::Log_1;

ula_new_opUla::ula_new_opUla(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_C);
    sensitive << ( ap_phi_mux_v_phi_fu_101_p14 );

    SC_METHOD(thread_C_ap_vld);

    SC_METHOD(thread_ap_phi_mux_v_1_phi_fu_126_p14);
    sensitive << ( B );
    sensitive << ( val_V_read_fu_66_p2 );
    sensitive << ( grp_read_fu_72_p2 );

    SC_METHOD(thread_ap_phi_mux_v_phi_fu_101_p14);
    sensitive << ( B );
    sensitive << ( aux_fu_150_p2 );
    sensitive << ( val_V_read_fu_66_p2 );
    sensitive << ( grp_read_fu_72_p2 );

    SC_METHOD(thread_aux_fu_150_p0);
    sensitive << ( A );

    SC_METHOD(thread_aux_fu_150_p1);
    sensitive << ( B );

    SC_METHOD(thread_aux_fu_150_p2);
    sensitive << ( aux_fu_150_p0 );
    sensitive << ( aux_fu_150_p1 );

    SC_METHOD(thread_carryOut);
    sensitive << ( ap_phi_mux_v_1_phi_fu_126_p14 );

    SC_METHOD(thread_carryOut_ap_vld);

    SC_METHOD(thread_grp_read_fu_72_p2);
    sensitive << ( A );
    sensitive << ( val_V_read_fu_66_p2 );

    SC_METHOD(thread_val_V_read_fu_66_p2);
    sensitive << ( op );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ula_new_opUla_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, A, "(port)A");
    sc_trace(mVcdFile, B, "(port)B");
    sc_trace(mVcdFile, op, "(port)op");
    sc_trace(mVcdFile, C, "(port)C");
    sc_trace(mVcdFile, C_ap_vld, "(port)C_ap_vld");
    sc_trace(mVcdFile, carryOut, "(port)carryOut");
    sc_trace(mVcdFile, carryOut_ap_vld, "(port)carryOut_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, aux_fu_150_p2, "aux_fu_150_p2");
    sc_trace(mVcdFile, ap_phi_mux_v_phi_fu_101_p14, "ap_phi_mux_v_phi_fu_101_p14");
    sc_trace(mVcdFile, val_V_read_fu_66_p2, "val_V_read_fu_66_p2");
    sc_trace(mVcdFile, grp_read_fu_72_p2, "grp_read_fu_72_p2");
    sc_trace(mVcdFile, ap_phi_mux_v_1_phi_fu_126_p14, "ap_phi_mux_v_1_phi_fu_126_p14");
    sc_trace(mVcdFile, aux_fu_150_p0, "aux_fu_150_p0");
    sc_trace(mVcdFile, aux_fu_150_p1, "aux_fu_150_p1");
#endif

    }
}

ula_new_opUla::~ula_new_opUla() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ula_new_opUla::thread_C() {
    C =  (sc_logic) (ap_phi_mux_v_phi_fu_101_p14.read()[0]);
}

void ula_new_opUla::thread_C_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        C_ap_vld = ap_const_logic_1;
    } else {
        C_ap_vld = ap_const_logic_0;
    }
}

void ula_new_opUla::thread_ap_phi_mux_v_1_phi_fu_126_p14() {
    if (((esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_2)) || 
         (esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_3) && 
          esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_0) || 
         (esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_1) && 
          esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_2) && 
          esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_3)))) {
        ap_phi_mux_v_1_phi_fu_126_p14 = ap_const_lv1_0;
    } else if ((esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_1) && 
                esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_1))) {
        ap_phi_mux_v_1_phi_fu_126_p14 =  (sc_lv<1>) (B.read());
    } else {
        ap_phi_mux_v_1_phi_fu_126_p14 = "X";
    }
}

void ula_new_opUla::thread_ap_phi_mux_v_phi_fu_101_p14() {
    if ((esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_3))) {
        ap_phi_mux_v_phi_fu_101_p14 = ap_const_lv1_1;
    } else if ((esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_0) || 
                (esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_2) && 
                 esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_0)))) {
        ap_phi_mux_v_phi_fu_101_p14 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_1) && 
                 esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_2)) || 
                (esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_3) && 
                 esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_0)))) {
        ap_phi_mux_v_phi_fu_101_p14 =  (sc_lv<1>) (B.read());
    } else if (((esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_1) && 
                 esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_1)) || 
                (esl_seteq<1,2,2>(val_V_read_fu_66_p2.read(), ap_const_lv2_1) && 
                 esl_seteq<1,1,1>(grp_read_fu_72_p2.read(), ap_const_lv1_0)))) {
        ap_phi_mux_v_phi_fu_101_p14 = aux_fu_150_p2.read();
    } else {
        ap_phi_mux_v_phi_fu_101_p14 = "X";
    }
}

void ula_new_opUla::thread_aux_fu_150_p0() {
    aux_fu_150_p0 =  (sc_lv<1>) (A.read());
}

void ula_new_opUla::thread_aux_fu_150_p1() {
    aux_fu_150_p1 =  (sc_lv<1>) (B.read());
}

void ula_new_opUla::thread_aux_fu_150_p2() {
    aux_fu_150_p2 = (aux_fu_150_p0.read() ^ aux_fu_150_p1.read());
}

void ula_new_opUla::thread_carryOut() {
    carryOut =  (sc_logic) (ap_phi_mux_v_1_phi_fu_126_p14.read()[0]);
}

void ula_new_opUla::thread_carryOut_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        carryOut_ap_vld = ap_const_logic_1;
    } else {
        carryOut_ap_vld = ap_const_logic_0;
    }
}

void ula_new_opUla::thread_grp_read_fu_72_p2() {
    grp_read_fu_72_p2 =  (sc_lv<1>) (A.read());
}

void ula_new_opUla::thread_val_V_read_fu_66_p2() {
    val_V_read_fu_66_p2 = op.read();
}

}

