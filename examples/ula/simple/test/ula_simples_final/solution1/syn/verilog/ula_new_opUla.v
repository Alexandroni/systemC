// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ula_new_opUla (
        A,
        B,
        op,
        C,
        C_ap_vld,
        carryOut,
        carryOut_ap_vld
);


input   A;
input   B;
input  [1:0] op;
output   C;
output   C_ap_vld;
output   carryOut;
output   carryOut_ap_vld;

wire   [0:0] aux_fu_150_p2;
reg   [0:0] ap_phi_mux_v_phi_fu_101_p14;
wire   [1:0] val_V_read_fu_66_p2;
wire   [0:0] grp_read_fu_72_p2;
reg   [0:0] ap_phi_mux_v_1_phi_fu_126_p14;
wire   [0:0] aux_fu_150_p0;
wire   [0:0] aux_fu_150_p1;

assign C_ap_vld = 1'b1;

always @ (*) begin
    if (((val_V_read_fu_66_p2 == 2'd0) | ((grp_read_fu_72_p2 == 1'd0) & (val_V_read_fu_66_p2 == 2'd3)) | ((grp_read_fu_72_p2 == 1'd0) & (val_V_read_fu_66_p2 == 2'd2)) | ((grp_read_fu_72_p2 == 1'd1) & (val_V_read_fu_66_p2 == 2'd3)) | ((grp_read_fu_72_p2 == 1'd1) & (val_V_read_fu_66_p2 == 2'd2)) | ((grp_read_fu_72_p2 == 1'd0) & (val_V_read_fu_66_p2 == 2'd1)))) begin
        ap_phi_mux_v_1_phi_fu_126_p14 = 1'd0;
    end else if (((grp_read_fu_72_p2 == 1'd1) & (val_V_read_fu_66_p2 == 2'd1))) begin
        ap_phi_mux_v_1_phi_fu_126_p14 = B;
    end else begin
        ap_phi_mux_v_1_phi_fu_126_p14 = 'bx;
    end
end

always @ (*) begin
    if (((grp_read_fu_72_p2 == 1'd1) & (val_V_read_fu_66_p2 == 2'd3))) begin
        ap_phi_mux_v_phi_fu_101_p14 = 1'd1;
    end else if (((val_V_read_fu_66_p2 == 2'd0) | ((grp_read_fu_72_p2 == 1'd0) & (val_V_read_fu_66_p2 == 2'd2)))) begin
        ap_phi_mux_v_phi_fu_101_p14 = 1'd0;
    end else if ((((grp_read_fu_72_p2 == 1'd0) & (val_V_read_fu_66_p2 == 2'd3)) | ((grp_read_fu_72_p2 == 1'd1) & (val_V_read_fu_66_p2 == 2'd2)))) begin
        ap_phi_mux_v_phi_fu_101_p14 = B;
    end else if ((((grp_read_fu_72_p2 == 1'd0) & (val_V_read_fu_66_p2 == 2'd1)) | ((grp_read_fu_72_p2 == 1'd1) & (val_V_read_fu_66_p2 == 2'd1)))) begin
        ap_phi_mux_v_phi_fu_101_p14 = aux_fu_150_p2;
    end else begin
        ap_phi_mux_v_phi_fu_101_p14 = 'bx;
    end
end

assign carryOut_ap_vld = 1'b1;

assign C = ap_phi_mux_v_phi_fu_101_p14;

assign aux_fu_150_p0 = A;

assign aux_fu_150_p1 = B;

assign aux_fu_150_p2 = (aux_fu_150_p0 ^ aux_fu_150_p1);

assign carryOut = ap_phi_mux_v_1_phi_fu_126_p14;

assign grp_read_fu_72_p2 = A;

assign val_V_read_fu_66_p2 = op;

endmodule //ula_new_opUla
