// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module simple_counter_counting (
        ap_clk,
        ap_rst,
        start,
        final,
        count_out,
        count_out_ap_vld,
        simple_counter_aux_V,
        simple_counter_aux_V_ap_vld,
        simple_counter_saida,
        simple_counter_saida_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   start;
input  [9:0] final;
output   count_out;
output   count_out_ap_vld;
output  [31:0] simple_counter_aux_V;
output   simple_counter_aux_V_ap_vld;
output   simple_counter_saida;
output   simple_counter_saida_ap_vld;

reg count_out_ap_vld;
reg[31:0] simple_counter_aux_V;
reg simple_counter_aux_V_ap_vld;
reg simple_counter_saida_ap_vld;

wire   [0:0] tmp_read_fu_106_p2;
reg   [0:0] tmp_reg_183;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_3_fu_142_p2;
reg   [0:0] tmp_3_reg_187;
reg   [0:0] v_1_fu_74;
wire    ap_CS_fsm_state2;
wire   [0:0] v_fu_156_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] simple_counter_aux_V_1_fu_78;
wire   [31:0] tmp_1_fu_131_p2;
wire   [31:0] tmp_2_fu_138_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_read_fu_106_p2 == 1'd1))) begin
        simple_counter_aux_V_1_fu_78 <= tmp_1_fu_131_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((tmp_3_reg_187 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (tmp_reg_183 == 1'd1)))) begin
        simple_counter_aux_V_1_fu_78 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_187 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (tmp_reg_183 == 1'd1))) begin
        v_1_fu_74 <= v_fu_156_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v_1_fu_74 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_read_fu_106_p2 == 1'd1))) begin
        tmp_3_reg_187 <= tmp_3_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_183 <= start;
    end
end

always @ (*) begin
    if (((tmp_3_reg_187 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (tmp_reg_183 == 1'd1))) begin
        count_out_ap_vld = 1'b1;
    end else begin
        count_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_reg_187 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (tmp_reg_183 == 1'd1))) begin
        simple_counter_aux_V = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_read_fu_106_p2 == 1'd1))) begin
        simple_counter_aux_V = tmp_1_fu_131_p2;
    end else begin
        simple_counter_aux_V = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_3_reg_187 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (tmp_reg_183 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_read_fu_106_p2 == 1'd1)))) begin
        simple_counter_aux_V_ap_vld = 1'b1;
    end else begin
        simple_counter_aux_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_reg_187 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (tmp_reg_183 == 1'd1))) begin
        simple_counter_saida_ap_vld = 1'b1;
    end else begin
        simple_counter_saida_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign count_out = v_fu_156_p2;

assign simple_counter_saida = v_fu_156_p2;

assign tmp_1_fu_131_p2 = (simple_counter_aux_V_1_fu_78 + 32'd1);

assign tmp_2_fu_138_p1 = final;

assign tmp_3_fu_142_p2 = ((tmp_1_fu_131_p2 == tmp_2_fu_138_p1) ? 1'b1 : 1'b0);

assign tmp_read_fu_106_p2 = start;

assign v_fu_156_p2 = (v_1_fu_74 ^ 1'd1);

endmodule //simple_counter_counting
