// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "simple_counter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic simple_counter::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> simple_counter::ap_const_lv1_0 = "0";
const sc_lv<32> simple_counter::ap_const_lv32_1 = "1";
const sc_lv<2> simple_counter::ap_const_lv2_0 = "00";
const sc_logic simple_counter::ap_const_logic_0 = sc_dt::Log_0;
const bool simple_counter::ap_const_boolean_1 = true;

simple_counter::simple_counter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_simple_counter_counting_fu_54 = new simple_counter_counting("grp_simple_counter_counting_fu_54");
    grp_simple_counter_counting_fu_54->ap_clk(clk);
    grp_simple_counter_counting_fu_54->ap_rst(reset);
    grp_simple_counter_counting_fu_54->start(start);
    grp_simple_counter_counting_fu_54->final(final);
    grp_simple_counter_counting_fu_54->count_out(grp_simple_counter_counting_fu_54_count_out);
    grp_simple_counter_counting_fu_54->count_out_ap_vld(grp_simple_counter_counting_fu_54_count_out_ap_vld);
    grp_simple_counter_counting_fu_54->simple_counter_aux_V(grp_simple_counter_counting_fu_54_simple_counter_aux_V);
    grp_simple_counter_counting_fu_54->simple_counter_aux_V_ap_vld(grp_simple_counter_counting_fu_54_simple_counter_aux_V_ap_vld);
    grp_simple_counter_counting_fu_54->simple_counter_saida(grp_simple_counter_counting_fu_54_simple_counter_saida);
    grp_simple_counter_counting_fu_54->simple_counter_saida_ap_vld(grp_simple_counter_counting_fu_54_simple_counter_saida_ap_vld);

    SC_METHOD(thread_count_out);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clk.pos() );

    count_out.initialize(SC_LOGIC_0);
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "simple_counter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, start, "(port)start");
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, final, "(port)final");
    sc_trace(mVcdFile, count_out, "(port)count_out");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_simple_counter_counting_fu_54_count_out, "grp_simple_counter_counting_fu_54_count_out");
    sc_trace(mVcdFile, grp_simple_counter_counting_fu_54_count_out_ap_vld, "grp_simple_counter_counting_fu_54_count_out_ap_vld");
    sc_trace(mVcdFile, grp_simple_counter_counting_fu_54_simple_counter_aux_V, "grp_simple_counter_counting_fu_54_simple_counter_aux_V");
    sc_trace(mVcdFile, grp_simple_counter_counting_fu_54_simple_counter_aux_V_ap_vld, "grp_simple_counter_counting_fu_54_simple_counter_aux_V_ap_vld");
    sc_trace(mVcdFile, grp_simple_counter_counting_fu_54_simple_counter_saida, "grp_simple_counter_counting_fu_54_simple_counter_saida");
    sc_trace(mVcdFile, grp_simple_counter_counting_fu_54_simple_counter_saida_ap_vld, "grp_simple_counter_counting_fu_54_simple_counter_saida_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
#endif

    }
    mHdltvinHandle.open("simple_counter.hdltvin.dat");
    mHdltvoutHandle.open("simple_counter.hdltvout.dat");
}

simple_counter::~simple_counter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_simple_counter_counting_fu_54;
}

void simple_counter::thread_count_out() {
    if ( reset.read() == ap_const_logic_1) {
        count_out =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, grp_simple_counter_counting_fu_54_count_out_ap_vld.read())) {
            count_out = grp_simple_counter_counting_fu_54_count_out.read();
        }
    }
}

void simple_counter::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void simple_counter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void simple_counter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"start\" :  \"" << start.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"final\" :  \"" << final.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"count_out\" :  \"" << count_out.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

