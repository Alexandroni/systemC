-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple_counter_counting is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    start : IN STD_LOGIC;
    final : IN STD_LOGIC_VECTOR (9 downto 0);
    count_out : OUT STD_LOGIC;
    count_out_ap_vld : OUT STD_LOGIC;
    simple_counter_aux_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    simple_counter_aux_V_ap_vld : OUT STD_LOGIC;
    simple_counter_saida : OUT STD_LOGIC;
    simple_counter_saida_ap_vld : OUT STD_LOGIC );
end;


architecture behav of simple_counter_counting is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tmp_read_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_183 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_187 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_1_fu_74 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal v_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal simple_counter_aux_V_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    simple_counter_aux_V_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_106_p2 = ap_const_lv1_1))) then 
                simple_counter_aux_V_1_fu_78 <= tmp_1_fu_131_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_3_reg_187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_183 = ap_const_lv1_1)))) then 
                simple_counter_aux_V_1_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    v_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_183 = ap_const_lv1_1))) then 
                v_1_fu_74 <= v_fu_156_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                v_1_fu_74 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_106_p2 = ap_const_lv1_1))) then
                tmp_3_reg_187 <= tmp_3_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_reg_183 <= (0=>start, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    count_out <= v_fu_156_p2(0);

    count_out_ap_vld_assign_proc : process(tmp_reg_183, tmp_3_reg_187, ap_CS_fsm_state4)
    begin
        if (((tmp_3_reg_187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_183 = ap_const_lv1_1))) then 
            count_out_ap_vld <= ap_const_logic_1;
        else 
            count_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    simple_counter_aux_V_assign_proc : process(tmp_read_fu_106_p2, tmp_reg_183, ap_CS_fsm_state3, tmp_3_reg_187, ap_CS_fsm_state4, tmp_1_fu_131_p2)
    begin
        if (((tmp_3_reg_187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_183 = ap_const_lv1_1))) then 
            simple_counter_aux_V <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_106_p2 = ap_const_lv1_1))) then 
            simple_counter_aux_V <= tmp_1_fu_131_p2;
        else 
            simple_counter_aux_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    simple_counter_aux_V_ap_vld_assign_proc : process(tmp_read_fu_106_p2, tmp_reg_183, ap_CS_fsm_state3, tmp_3_reg_187, ap_CS_fsm_state4)
    begin
        if ((((tmp_3_reg_187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_183 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_106_p2 = ap_const_lv1_1)))) then 
            simple_counter_aux_V_ap_vld <= ap_const_logic_1;
        else 
            simple_counter_aux_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    simple_counter_saida <= v_fu_156_p2(0);

    simple_counter_saida_ap_vld_assign_proc : process(tmp_reg_183, tmp_3_reg_187, ap_CS_fsm_state4)
    begin
        if (((tmp_3_reg_187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_183 = ap_const_lv1_1))) then 
            simple_counter_saida_ap_vld <= ap_const_logic_1;
        else 
            simple_counter_saida_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_131_p2 <= std_logic_vector(unsigned(simple_counter_aux_V_1_fu_78) + unsigned(ap_const_lv32_1));
    tmp_2_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(final),32));
    tmp_3_fu_142_p2 <= "1" when (tmp_1_fu_131_p2 = tmp_2_fu_138_p1) else "0";
    tmp_read_fu_106_p2 <= (0=>start, others=>'-');
    v_fu_156_p2 <= (v_1_fu_74 xor ap_const_lv1_1);
end behav;
