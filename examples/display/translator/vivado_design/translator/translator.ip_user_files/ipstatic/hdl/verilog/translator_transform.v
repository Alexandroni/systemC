// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module translator_transform (
        ap_clk,
        ap_rst,
        number,
        whichDisp,
        toDisp,
        toDisp_ap_vld,
        translator_disp,
        translator_disp_ap_vld,
        translator_digits_address0,
        translator_digits_ce0,
        translator_digits_we0,
        translator_digits_d0,
        translator_digits_address1,
        translator_digits_ce1,
        translator_digits_we1,
        translator_digits_d1,
        translator_transformed_i,
        translator_transformed_o,
        translator_transformed_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;
















input   ap_clk;
input   ap_rst;
input  [9:0] number;
input  [3:0] whichDisp;
output  [6:0] toDisp;
output   toDisp_ap_vld;
output  [31:0] translator_disp;
output   translator_disp_ap_vld;
output  [1:0] translator_digits_address0;
output   translator_digits_ce0;
output   translator_digits_we0;
output  [31:0] translator_digits_d0;
output  [1:0] translator_digits_address1;
output   translator_digits_ce1;
output   translator_digits_we1;
output  [31:0] translator_digits_d1;
input  [31:0] translator_transformed_i;
output  [31:0] translator_transformed_o;
output   translator_transformed_o_ap_vld;

reg toDisp_ap_vld;
reg translator_disp_ap_vld;
reg[1:0] translator_digits_address0;
reg translator_digits_ce0;
reg translator_digits_we0;
reg[31:0] translator_digits_d0;
reg[1:0] translator_digits_address1;
reg translator_digits_ce1;
reg translator_digits_we1;
reg[31:0] translator_digits_d1;
reg[31:0] translator_transformed_o;
reg translator_transformed_o_ap_vld;

reg   [9:0] val_V_reg_490;
wire   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] div_cast_reg_497;
wire    ap_CS_fsm_state3;
reg   [3:0] div1_cast_reg_502;
wire   [0:0] tmp_6_fu_383_p2;
reg   [0:0] tmp_6_reg_509;
wire   [3:0] tmp_4_fu_403_p3;
reg   [3:0] tmp_4_reg_515;
wire    ap_CS_fsm_state13;
reg   [6:0] ap_phi_mux_p_0_i2_phi_fu_245_p22;
wire    ap_CS_fsm_state14;
wire   [3:0] val_V_1_read_fu_166_p2;
reg   [6:0] ap_phi_mux_p_0_i1_phi_fu_283_p22;
wire   [4:0] tmp_9_fu_434_p1;
reg   [6:0] ap_phi_mux_p_0_i_phi_fu_321_p22;
wire   [4:0] tmp_7_fu_425_p1;
wire   [31:0] p_cast_cast_fu_448_p3;
wire   [31:0] p_0_i2_cast_fu_456_p1;
wire   [31:0] p_0_i1_cast_fu_461_p1;
wire   [31:0] p_0_i_cast_fu_466_p1;
wire    ap_CS_fsm_state15;
wire   [31:0] valor_assign_2_fu_410_p1;
wire   [31:0] valor_assign_3_cast_fu_420_p1;
wire   [31:0] valor_assign_fu_429_p1;
wire   [31:0] valor_assign_1_fu_438_p1;
wire   [4:0] grp_fu_356_p1;
wire   [21:0] mul2_fu_476_p2;
wire   [21:0] mul_fu_483_p2;
wire   [4:0] grp_fu_388_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_3_fu_393_p2;
wire   [3:0] tmp_5_fu_398_p2;
wire   [0:0] valor_assign_3_fu_415_p2;
wire   [9:0] grp_fu_356_p2;
wire   [6:0] grp_fu_388_p2;
wire   [11:0] mul2_fu_476_p0;
wire   [9:0] mul2_fu_476_p1;
wire   [21:0] zext1_cast_fu_362_p1;
wire   [11:0] mul_fu_483_p0;
wire   [9:0] mul_fu_483_p1;
reg    grp_fu_356_ap_start;
wire    grp_fu_356_ap_done;
reg    grp_fu_388_ap_start;
wire    grp_fu_388_ap_done;
reg   [14:0] ap_NS_fsm;
reg    ap_condition_473;
reg    ap_condition_485;
reg    ap_condition_496;

translator_urem_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
translator_urem_1bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_356_ap_start),
    .done(grp_fu_356_ap_done),
    .din0(number),
    .din1(grp_fu_356_p1),
    .ce(1'b1),
    .dout(grp_fu_356_p2)
);

translator_urem_7cud #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
translator_urem_7cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_388_ap_start),
    .done(grp_fu_388_ap_done),
    .din0(div_cast_reg_497),
    .din1(grp_fu_388_p1),
    .ce(1'b1),
    .dout(grp_fu_388_p2)
);

translator_mul_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 22 ))
translator_mul_mudEe_U3(
    .din0(mul2_fu_476_p0),
    .din1(mul2_fu_476_p1),
    .dout(mul2_fu_476_p2)
);

translator_mul_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 22 ))
translator_mul_mudEe_U4(
    .din0(mul_fu_483_p0),
    .din1(mul_fu_483_p1),
    .dout(mul_fu_483_p2)
);

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        div1_cast_reg_502 <= {{mul_fu_483_p2[20:17]}};
        div_cast_reg_497 <= {{mul2_fu_476_p2[20:14]}};
        tmp_6_reg_509 <= tmp_6_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_4_reg_515 <= tmp_4_fu_403_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        val_V_reg_490 <= number;
    end
end

always @ (*) begin
    if (((val_V_1_read_fu_166_p2 == 4'd11) & (1'b1 == ap_CS_fsm_state14))) begin
        if ((tmp_9_fu_434_p1 == 5'd0)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd1;
        end else if ((tmp_9_fu_434_p1 == 5'd1)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd79;
        end else if ((tmp_9_fu_434_p1 == 5'd2)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd18;
        end else if ((tmp_9_fu_434_p1 == 5'd3)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd6;
        end else if ((tmp_9_fu_434_p1 == 5'd4)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd76;
        end else if ((tmp_9_fu_434_p1 == 5'd5)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd36;
        end else if ((tmp_9_fu_434_p1 == 5'd6)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd32;
        end else if ((tmp_9_fu_434_p1 == 5'd7)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd15;
        end else if ((tmp_9_fu_434_p1 == 5'd8)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd0;
        end else if ((tmp_9_fu_434_p1 == 5'd9)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd4;
        end else if ((ap_condition_473 == 1'b1)) begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 7'd127;
        end else begin
            ap_phi_mux_p_0_i1_phi_fu_283_p22 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_i1_phi_fu_283_p22 = 'bx;
    end
end

always @ (*) begin
    if (((val_V_1_read_fu_166_p2 == 4'd13) & (1'b1 == ap_CS_fsm_state14))) begin
        if ((tmp_4_reg_515 == 4'd0)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd1;
        end else if ((tmp_4_reg_515 == 4'd1)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd79;
        end else if ((tmp_4_reg_515 == 4'd2)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd18;
        end else if ((tmp_4_reg_515 == 4'd3)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd6;
        end else if ((tmp_4_reg_515 == 4'd4)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd76;
        end else if ((tmp_4_reg_515 == 4'd5)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd36;
        end else if ((tmp_4_reg_515 == 4'd6)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd32;
        end else if ((tmp_4_reg_515 == 4'd7)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd15;
        end else if ((tmp_4_reg_515 == 4'd8)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd0;
        end else if ((tmp_4_reg_515 == 4'd9)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd4;
        end else if ((ap_condition_485 == 1'b1)) begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 7'd127;
        end else begin
            ap_phi_mux_p_0_i2_phi_fu_245_p22 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_i2_phi_fu_245_p22 = 'bx;
    end
end

always @ (*) begin
    if (((val_V_1_read_fu_166_p2 == 4'd7) & (1'b1 == ap_CS_fsm_state14))) begin
        if ((5'd0 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd1;
        end else if ((5'd1 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd79;
        end else if ((5'd2 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd18;
        end else if ((5'd3 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd6;
        end else if ((5'd4 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd76;
        end else if ((5'd5 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd36;
        end else if ((5'd6 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd32;
        end else if ((5'd7 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd15;
        end else if ((5'd8 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd0;
        end else if ((5'd9 == tmp_7_fu_425_p1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd4;
        end else if ((ap_condition_496 == 1'b1)) begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 7'd127;
        end else begin
            ap_phi_mux_p_0_i_phi_fu_321_p22 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_i_phi_fu_321_p22 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_356_ap_start = 1'b1;
    end else begin
        grp_fu_356_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_388_ap_start = 1'b1;
    end else begin
        grp_fu_388_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        toDisp_ap_vld = 1'b1;
    end else begin
        toDisp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        translator_digits_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        translator_digits_address0 = 64'd2;
    end else begin
        translator_digits_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        translator_digits_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        translator_digits_address1 = 64'd3;
    end else begin
        translator_digits_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        translator_digits_ce0 = 1'b1;
    end else begin
        translator_digits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        translator_digits_ce1 = 1'b1;
    end else begin
        translator_digits_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        translator_digits_d0 = valor_assign_fu_429_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        translator_digits_d0 = valor_assign_2_fu_410_p1;
    end else begin
        translator_digits_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        translator_digits_d1 = valor_assign_1_fu_438_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        translator_digits_d1 = valor_assign_3_cast_fu_420_p1;
    end else begin
        translator_digits_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        translator_digits_we0 = 1'b1;
    end else begin
        translator_digits_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        translator_digits_we1 = 1'b1;
    end else begin
        translator_digits_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        translator_disp_ap_vld = 1'b1;
    end else begin
        translator_disp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if ((val_V_1_read_fu_166_p2 == 4'd7)) begin
            translator_transformed_o = p_0_i_cast_fu_466_p1;
        end else if ((val_V_1_read_fu_166_p2 == 4'd11)) begin
            translator_transformed_o = p_0_i1_cast_fu_461_p1;
        end else if ((val_V_1_read_fu_166_p2 == 4'd13)) begin
            translator_transformed_o = p_0_i2_cast_fu_456_p1;
        end else if ((val_V_1_read_fu_166_p2 == 4'd14)) begin
            translator_transformed_o = p_cast_cast_fu_448_p3;
        end else begin
            translator_transformed_o = translator_transformed_i;
        end
    end else begin
        translator_transformed_o = translator_transformed_i;
    end
end

always @ (*) begin
    if ((((val_V_1_read_fu_166_p2 == 4'd13) & (1'b1 == ap_CS_fsm_state14)) | ((val_V_1_read_fu_166_p2 == 4'd14) & (1'b1 == ap_CS_fsm_state14)) | ((val_V_1_read_fu_166_p2 == 4'd7) & (1'b1 == ap_CS_fsm_state14)) | ((val_V_1_read_fu_166_p2 == 4'd11) & (1'b1 == ap_CS_fsm_state14)))) begin
        translator_transformed_o_ap_vld = 1'b1;
    end else begin
        translator_transformed_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm = ap_ST_fsm_state1;

assign ap_CS_fsm_state1 = ap_ST_fsm_state1[32'd0];

assign ap_CS_fsm_state13 = ap_ST_fsm_state1[32'd12];

assign ap_CS_fsm_state14 = ap_ST_fsm_state1[32'd13];

assign ap_CS_fsm_state15 = ap_ST_fsm_state1[32'd14];

assign ap_CS_fsm_state3 = ap_ST_fsm_state1[32'd2];

assign ap_CS_fsm_state4 = ap_ST_fsm_state1[32'd3];

always @ (*) begin
    ap_condition_473 = (~(tmp_9_fu_434_p1 == 5'd9) & ~(tmp_9_fu_434_p1 == 5'd8) & ~(tmp_9_fu_434_p1 == 5'd7) & ~(tmp_9_fu_434_p1 == 5'd6) & ~(tmp_9_fu_434_p1 == 5'd5) & ~(tmp_9_fu_434_p1 == 5'd4) & ~(tmp_9_fu_434_p1 == 5'd3) & ~(tmp_9_fu_434_p1 == 5'd2) & ~(tmp_9_fu_434_p1 == 5'd1) & ~(tmp_9_fu_434_p1 == 5'd0));
end

always @ (*) begin
    ap_condition_485 = (~(tmp_4_reg_515 == 4'd4) & ~(tmp_4_reg_515 == 4'd3) & ~(tmp_4_reg_515 == 4'd2) & ~(tmp_4_reg_515 == 4'd1) & ~(tmp_4_reg_515 == 4'd0) & ~(tmp_4_reg_515 == 4'd9) & ~(tmp_4_reg_515 == 4'd8) & ~(tmp_4_reg_515 == 4'd7) & ~(tmp_4_reg_515 == 4'd6) & ~(tmp_4_reg_515 == 4'd5));
end

always @ (*) begin
    ap_condition_496 = (~(5'd9 == tmp_7_fu_425_p1) & ~(5'd8 == tmp_7_fu_425_p1) & ~(5'd7 == tmp_7_fu_425_p1) & ~(5'd6 == tmp_7_fu_425_p1) & ~(5'd5 == tmp_7_fu_425_p1) & ~(5'd4 == tmp_7_fu_425_p1) & ~(5'd3 == tmp_7_fu_425_p1) & ~(5'd2 == tmp_7_fu_425_p1) & ~(5'd1 == tmp_7_fu_425_p1) & ~(5'd0 == tmp_7_fu_425_p1));
end

assign grp_fu_356_p1 = 10'd10;

assign grp_fu_388_p1 = 7'd10;

assign mul2_fu_476_p0 = 22'd1639;

assign mul2_fu_476_p1 = zext1_cast_fu_362_p1;

assign mul_fu_483_p0 = 22'd1311;

assign mul_fu_483_p1 = zext1_cast_fu_362_p1;

assign p_0_i1_cast_fu_461_p1 = ap_phi_mux_p_0_i1_phi_fu_283_p22;

assign p_0_i2_cast_fu_456_p1 = ap_phi_mux_p_0_i2_phi_fu_245_p22;

assign p_0_i_cast_fu_466_p1 = ap_phi_mux_p_0_i_phi_fu_321_p22;

assign p_cast_cast_fu_448_p3 = ((tmp_6_reg_509[0:0] === 1'b1) ? 32'd1 : 32'd79);

assign tmp_3_fu_393_p2 = ((div1_cast_reg_502 < 4'd10) ? 1'b1 : 1'b0);

assign tmp_4_fu_403_p3 = ((tmp_3_fu_393_p2[0:0] === 1'b1) ? div1_cast_reg_502 : tmp_5_fu_398_p2);

assign tmp_5_fu_398_p2 = (4'd6 + div1_cast_reg_502);

assign tmp_6_fu_383_p2 = ((val_V_reg_490 < 10'd1000) ? 1'b1 : 1'b0);

assign tmp_7_fu_425_p1 = grp_fu_356_p2[4:0];

assign tmp_9_fu_434_p1 = grp_fu_388_p2[4:0];

assign toDisp = translator_transformed_i[6:0];

assign translator_disp = whichDisp;

assign val_V_1_read_fu_166_p2 = whichDisp;

assign valor_assign_1_fu_438_p1 = grp_fu_388_p2;

assign valor_assign_2_fu_410_p1 = tmp_4_fu_403_p3;

assign valor_assign_3_cast_fu_420_p1 = valor_assign_3_fu_415_p2;

assign valor_assign_3_fu_415_p2 = (tmp_6_reg_509 ^ 1'd1);

assign valor_assign_fu_429_p1 = grp_fu_356_p2;

assign zext1_cast_fu_362_p1 = val_V_reg_490;

endmodule //translator_transform
