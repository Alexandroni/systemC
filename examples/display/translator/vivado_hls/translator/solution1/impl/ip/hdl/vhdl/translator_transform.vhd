-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity translator_transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    number : IN STD_LOGIC_VECTOR (9 downto 0);
    whichDisp : IN STD_LOGIC_VECTOR (3 downto 0);
    toDisp : OUT STD_LOGIC_VECTOR (6 downto 0);
    toDisp_ap_vld : OUT STD_LOGIC;
    translator_disp : OUT STD_LOGIC_VECTOR (31 downto 0);
    translator_disp_ap_vld : OUT STD_LOGIC;
    translator_digits_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    translator_digits_ce0 : OUT STD_LOGIC;
    translator_digits_we0 : OUT STD_LOGIC;
    translator_digits_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    translator_digits_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    translator_digits_ce1 : OUT STD_LOGIC;
    translator_digits_we1 : OUT STD_LOGIC;
    translator_digits_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    translator_transformed_i : IN STD_LOGIC_VECTOR (31 downto 0);
    translator_transformed_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    translator_transformed_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of translator_transform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_24 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_const_lv7_4C : STD_LOGIC_VECTOR (6 downto 0) := "1001100";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_12 : STD_LOGIC_VECTOR (6 downto 0) := "0010010";
    constant ap_const_lv7_4F : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv22_667 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000011001100111";
    constant ap_const_lv22_51F : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010100011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal val_V_reg_490 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal div_cast_reg_497 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal div1_cast_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_403_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_phi_mux_p_0_i2_phi_fu_245_p22 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal val_V_1_read_fu_166_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_p_0_i1_phi_fu_283_p22 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_434_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_p_0_i_phi_fu_321_p22 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_425_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast_cast_fu_448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i2_cast_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i1_cast_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_cast_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal valor_assign_2_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valor_assign_3_cast_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valor_assign_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valor_assign_1_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul2_fu_476_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_fu_483_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_398_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal valor_assign_3_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul2_fu_476_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul2_fu_476_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext1_cast_fu_362_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_fu_483_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_fu_483_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_356_ap_start : STD_LOGIC;
    signal grp_fu_356_ap_done : STD_LOGIC;
    signal grp_fu_388_ap_start : STD_LOGIC;
    signal grp_fu_388_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_473 : BOOLEAN;
    signal ap_condition_485 : BOOLEAN;
    signal ap_condition_496 : BOOLEAN;

    component translator_urem_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component translator_urem_7cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component translator_mul_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    translator_urem_1bkb_U1 : component translator_urem_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_356_ap_start,
        done => grp_fu_356_ap_done,
        din0 => number,
        din1 => grp_fu_356_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p2);

    translator_urem_7cud_U2 : component translator_urem_7cud
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_388_ap_start,
        done => grp_fu_388_ap_done,
        din0 => div_cast_reg_497,
        din1 => grp_fu_388_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_388_p2);

    translator_mul_mudEe_U3 : component translator_mul_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        dout_WIDTH => 22)
    port map (
        din0 => mul2_fu_476_p0,
        din1 => mul2_fu_476_p1,
        dout => mul2_fu_476_p2);

    translator_mul_mudEe_U4 : component translator_mul_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        dout_WIDTH => 22)
    port map (
        din0 => mul_fu_483_p0,
        din1 => mul_fu_483_p1,
        dout => mul_fu_483_p2);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                div1_cast_reg_502 <= mul_fu_483_p2(20 downto 17);
                div_cast_reg_497 <= mul2_fu_476_p2(20 downto 14);
                tmp_6_reg_509 <= tmp_6_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_4_reg_515 <= tmp_4_fu_403_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                val_V_reg_490 <= number;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm <= ap_ST_fsm_state1;
    ap_CS_fsm_state1 <= ap_ST_fsm_state1(0);
    ap_CS_fsm_state13 <= ap_ST_fsm_state1(12);
    ap_CS_fsm_state14 <= ap_ST_fsm_state1(13);
    ap_CS_fsm_state15 <= ap_ST_fsm_state1(14);
    ap_CS_fsm_state3 <= ap_ST_fsm_state1(2);
    ap_CS_fsm_state4 <= ap_ST_fsm_state1(3);

    ap_condition_473_assign_proc : process(tmp_9_fu_434_p1)
    begin
                ap_condition_473 <= (not((tmp_9_fu_434_p1 = ap_const_lv5_9)) and not((tmp_9_fu_434_p1 = ap_const_lv5_8)) and not((tmp_9_fu_434_p1 = ap_const_lv5_7)) and not((tmp_9_fu_434_p1 = ap_const_lv5_6)) and not((tmp_9_fu_434_p1 = ap_const_lv5_5)) and not((tmp_9_fu_434_p1 = ap_const_lv5_4)) and not((tmp_9_fu_434_p1 = ap_const_lv5_3)) and not((tmp_9_fu_434_p1 = ap_const_lv5_2)) and not((tmp_9_fu_434_p1 = ap_const_lv5_1)) and not((tmp_9_fu_434_p1 = ap_const_lv5_0)));
    end process;


    ap_condition_485_assign_proc : process(tmp_4_reg_515)
    begin
                ap_condition_485 <= (not((tmp_4_reg_515 = ap_const_lv4_4)) and not((tmp_4_reg_515 = ap_const_lv4_3)) and not((tmp_4_reg_515 = ap_const_lv4_2)) and not((tmp_4_reg_515 = ap_const_lv4_1)) and not((tmp_4_reg_515 = ap_const_lv4_0)) and not((tmp_4_reg_515 = ap_const_lv4_9)) and not((tmp_4_reg_515 = ap_const_lv4_8)) and not((tmp_4_reg_515 = ap_const_lv4_7)) and not((tmp_4_reg_515 = ap_const_lv4_6)) and not((tmp_4_reg_515 = ap_const_lv4_5)));
    end process;


    ap_condition_496_assign_proc : process(tmp_7_fu_425_p1)
    begin
                ap_condition_496 <= (not((ap_const_lv5_9 = tmp_7_fu_425_p1)) and not((ap_const_lv5_8 = tmp_7_fu_425_p1)) and not((ap_const_lv5_7 = tmp_7_fu_425_p1)) and not((ap_const_lv5_6 = tmp_7_fu_425_p1)) and not((ap_const_lv5_5 = tmp_7_fu_425_p1)) and not((ap_const_lv5_4 = tmp_7_fu_425_p1)) and not((ap_const_lv5_3 = tmp_7_fu_425_p1)) and not((ap_const_lv5_2 = tmp_7_fu_425_p1)) and not((ap_const_lv5_1 = tmp_7_fu_425_p1)) and not((ap_const_lv5_0 = tmp_7_fu_425_p1)));
    end process;


    ap_phi_mux_p_0_i1_phi_fu_283_p22_assign_proc : process(ap_CS_fsm_state14, val_V_1_read_fu_166_p2, tmp_9_fu_434_p1, ap_condition_473)
    begin
        if (((val_V_1_read_fu_166_p2 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
            if ((tmp_9_fu_434_p1 = ap_const_lv5_0)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_1;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_1)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_4F;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_2)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_12;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_3)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_6;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_4)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_4C;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_5)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_24;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_6)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_20;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_7)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_F;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_8)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_0;
            elsif ((tmp_9_fu_434_p1 = ap_const_lv5_9)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_4;
            elsif ((ap_condition_473 = ap_const_boolean_1)) then 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= ap_const_lv7_7F;
            else 
                ap_phi_mux_p_0_i1_phi_fu_283_p22 <= "XXXXXXX";
            end if;
        else 
            ap_phi_mux_p_0_i1_phi_fu_283_p22 <= "XXXXXXX";
        end if; 
    end process;


    ap_phi_mux_p_0_i2_phi_fu_245_p22_assign_proc : process(tmp_4_reg_515, ap_CS_fsm_state14, val_V_1_read_fu_166_p2, ap_condition_485)
    begin
        if (((val_V_1_read_fu_166_p2 = ap_const_lv4_D) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
            if ((tmp_4_reg_515 = ap_const_lv4_0)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_1;
            elsif ((tmp_4_reg_515 = ap_const_lv4_1)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_4F;
            elsif ((tmp_4_reg_515 = ap_const_lv4_2)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_12;
            elsif ((tmp_4_reg_515 = ap_const_lv4_3)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_6;
            elsif ((tmp_4_reg_515 = ap_const_lv4_4)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_4C;
            elsif ((tmp_4_reg_515 = ap_const_lv4_5)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_24;
            elsif ((tmp_4_reg_515 = ap_const_lv4_6)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_20;
            elsif ((tmp_4_reg_515 = ap_const_lv4_7)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_F;
            elsif ((tmp_4_reg_515 = ap_const_lv4_8)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_0;
            elsif ((tmp_4_reg_515 = ap_const_lv4_9)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_4;
            elsif ((ap_condition_485 = ap_const_boolean_1)) then 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= ap_const_lv7_7F;
            else 
                ap_phi_mux_p_0_i2_phi_fu_245_p22 <= "XXXXXXX";
            end if;
        else 
            ap_phi_mux_p_0_i2_phi_fu_245_p22 <= "XXXXXXX";
        end if; 
    end process;


    ap_phi_mux_p_0_i_phi_fu_321_p22_assign_proc : process(ap_CS_fsm_state14, val_V_1_read_fu_166_p2, tmp_7_fu_425_p1, ap_condition_496)
    begin
        if (((val_V_1_read_fu_166_p2 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
            if ((ap_const_lv5_0 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_1;
            elsif ((ap_const_lv5_1 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_4F;
            elsif ((ap_const_lv5_2 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_12;
            elsif ((ap_const_lv5_3 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_6;
            elsif ((ap_const_lv5_4 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_4C;
            elsif ((ap_const_lv5_5 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_24;
            elsif ((ap_const_lv5_6 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_20;
            elsif ((ap_const_lv5_7 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_F;
            elsif ((ap_const_lv5_8 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_0;
            elsif ((ap_const_lv5_9 = tmp_7_fu_425_p1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_4;
            elsif ((ap_condition_496 = ap_const_boolean_1)) then 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= ap_const_lv7_7F;
            else 
                ap_phi_mux_p_0_i_phi_fu_321_p22 <= "XXXXXXX";
            end if;
        else 
            ap_phi_mux_p_0_i_phi_fu_321_p22 <= "XXXXXXX";
        end if; 
    end process;


    grp_fu_356_ap_start_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_356_ap_start <= ap_const_logic_1;
        else 
            grp_fu_356_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_356_p1 <= ap_const_lv10_A(5 - 1 downto 0);

    grp_fu_388_ap_start_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_388_ap_start <= ap_const_logic_1;
        else 
            grp_fu_388_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_388_p1 <= ap_const_lv7_A(5 - 1 downto 0);
    mul2_fu_476_p0 <= ap_const_lv22_667(12 - 1 downto 0);
    mul2_fu_476_p1 <= zext1_cast_fu_362_p1(10 - 1 downto 0);
    mul_fu_483_p0 <= ap_const_lv22_51F(12 - 1 downto 0);
    mul_fu_483_p1 <= zext1_cast_fu_362_p1(10 - 1 downto 0);
    p_0_i1_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_i1_phi_fu_283_p22),32));
    p_0_i2_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_i2_phi_fu_245_p22),32));
    p_0_i_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_i_phi_fu_321_p22),32));
    p_cast_cast_fu_448_p3 <= 
        ap_const_lv32_1 when (tmp_6_reg_509(0) = '1') else 
        ap_const_lv32_4F;
    tmp_3_fu_393_p2 <= "1" when (unsigned(div1_cast_reg_502) < unsigned(ap_const_lv4_A)) else "0";
    tmp_4_fu_403_p3 <= 
        div1_cast_reg_502 when (tmp_3_fu_393_p2(0) = '1') else 
        tmp_5_fu_398_p2;
    tmp_5_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv4_6) + unsigned(div1_cast_reg_502));
    tmp_6_fu_383_p2 <= "1" when (unsigned(val_V_reg_490) < unsigned(ap_const_lv10_3E8)) else "0";
    tmp_7_fu_425_p1 <= grp_fu_356_p2(5 - 1 downto 0);
    tmp_9_fu_434_p1 <= grp_fu_388_p2(5 - 1 downto 0);
    toDisp <= translator_transformed_i(7 - 1 downto 0);

    toDisp_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            toDisp_ap_vld <= ap_const_logic_1;
        else 
            toDisp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    translator_digits_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            translator_digits_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            translator_digits_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            translator_digits_address0 <= "XX";
        end if; 
    end process;


    translator_digits_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            translator_digits_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            translator_digits_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        else 
            translator_digits_address1 <= "XX";
        end if; 
    end process;


    translator_digits_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            translator_digits_ce0 <= ap_const_logic_1;
        else 
            translator_digits_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    translator_digits_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            translator_digits_ce1 <= ap_const_logic_1;
        else 
            translator_digits_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    translator_digits_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, valor_assign_2_fu_410_p1, valor_assign_fu_429_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            translator_digits_d0 <= valor_assign_fu_429_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            translator_digits_d0 <= valor_assign_2_fu_410_p1;
        else 
            translator_digits_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    translator_digits_d1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, valor_assign_3_cast_fu_420_p1, valor_assign_1_fu_438_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            translator_digits_d1 <= valor_assign_1_fu_438_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            translator_digits_d1 <= valor_assign_3_cast_fu_420_p1;
        else 
            translator_digits_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    translator_digits_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            translator_digits_we0 <= ap_const_logic_1;
        else 
            translator_digits_we0 <= ap_const_logic_0;
        end if; 
    end process;


    translator_digits_we1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            translator_digits_we1 <= ap_const_logic_1;
        else 
            translator_digits_we1 <= ap_const_logic_0;
        end if; 
    end process;

    translator_disp <= std_logic_vector(IEEE.numeric_std.resize(unsigned(whichDisp),32));

    translator_disp_ap_vld_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            translator_disp_ap_vld <= ap_const_logic_1;
        else 
            translator_disp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    translator_transformed_o_assign_proc : process(translator_transformed_i, ap_CS_fsm_state14, val_V_1_read_fu_166_p2, p_cast_cast_fu_448_p3, p_0_i2_cast_fu_456_p1, p_0_i1_cast_fu_461_p1, p_0_i_cast_fu_466_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((val_V_1_read_fu_166_p2 = ap_const_lv4_7)) then 
                translator_transformed_o <= p_0_i_cast_fu_466_p1;
            elsif ((val_V_1_read_fu_166_p2 = ap_const_lv4_B)) then 
                translator_transformed_o <= p_0_i1_cast_fu_461_p1;
            elsif ((val_V_1_read_fu_166_p2 = ap_const_lv4_D)) then 
                translator_transformed_o <= p_0_i2_cast_fu_456_p1;
            elsif ((val_V_1_read_fu_166_p2 = ap_const_lv4_E)) then 
                translator_transformed_o <= p_cast_cast_fu_448_p3;
            else 
                translator_transformed_o <= translator_transformed_i;
            end if;
        else 
            translator_transformed_o <= translator_transformed_i;
        end if; 
    end process;


    translator_transformed_o_ap_vld_assign_proc : process(ap_CS_fsm_state14, val_V_1_read_fu_166_p2)
    begin
        if ((((val_V_1_read_fu_166_p2 = ap_const_lv4_D) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((val_V_1_read_fu_166_p2 = ap_const_lv4_E) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((val_V_1_read_fu_166_p2 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((val_V_1_read_fu_166_p2 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            translator_transformed_o_ap_vld <= ap_const_logic_1;
        else 
            translator_transformed_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    val_V_1_read_fu_166_p2 <= whichDisp;
    valor_assign_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_388_p2),32));
    valor_assign_2_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_403_p3),32));
    valor_assign_3_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(valor_assign_3_fu_415_p2),32));
    valor_assign_3_fu_415_p2 <= (tmp_6_reg_509 xor ap_const_lv1_1);
    valor_assign_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_356_p2),32));
    zext1_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_V_reg_490),22));
end behav;
