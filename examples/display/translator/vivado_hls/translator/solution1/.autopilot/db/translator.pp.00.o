	.file	"translator.cpp"
	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init,@function
__cxx_global_var_init:                  # @__cxx_global_var_init
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2:
	.cfi_def_cfa_offset 16
.Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZStL8__ioinit, %rdi
	callq	_ZNSt8ios_base4InitC1Ev
	leaq	_ZNSt8ios_base4InitD1Ev, %rdi
	leaq	_ZStL8__ioinit, %rax
	leaq	__dso_handle, %rdx
	movq	%rax, %rsi
	callq	__cxa_atexit
	movl	%eax, -4(%rbp)          # 4-byte Spill
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp5:
	.size	__cxx_global_var_init, .Ltmp5-__cxx_global_var_init
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,"axG",@progbits,_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,comdat
	.weak	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,@function
_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi: # @_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movl	%edx, -20(%rsp)
	ret
.Ltmp6:
	.size	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi, .Ltmp6-_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init1,@function
__cxx_global_var_init1:                 # @__cxx_global_var_init1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	leaq	_ZN7sc_coreL17api_version_checkE, %rdi
	callq	_ZN7sc_core20sc_api_version_2_3_0C1Ev
	popq	%rbp
	ret
.Ltmp12:
	.size	__cxx_global_var_init1, .Ltmp12-__cxx_global_var_init1
	.cfi_endproc

	.text
	.globl	_Z9translatei
	.align	16, 0x90
	.type	_Z9translatei,@function
_Z9translatei:                          # @_Z9translatei
	.cfi_startproc
# BB#0:
	movl	%edi, -8(%rsp)
	movl	-8(%rsp), %eax
	cmpq	$9, %rax
	movq	%rax, -16(%rsp)         # 8-byte Spill
	ja	.LBB3_11
# BB#13:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	.LJTI3_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB3_1:
	movl	$1, -4(%rsp)
	jmp	.LBB3_12
.LBB3_2:
	movl	$79, -4(%rsp)
	jmp	.LBB3_12
.LBB3_3:
	movl	$18, -4(%rsp)
	jmp	.LBB3_12
.LBB3_4:
	movl	$6, -4(%rsp)
	jmp	.LBB3_12
.LBB3_5:
	movl	$76, -4(%rsp)
	jmp	.LBB3_12
.LBB3_6:
	movl	$36, -4(%rsp)
	jmp	.LBB3_12
.LBB3_7:
	movl	$32, -4(%rsp)
	jmp	.LBB3_12
.LBB3_8:
	movl	$15, -4(%rsp)
	jmp	.LBB3_12
.LBB3_9:
	movl	$0, -4(%rsp)
	jmp	.LBB3_12
.LBB3_10:
	movl	$4, -4(%rsp)
	jmp	.LBB3_12
.LBB3_11:
	movl	$127, -4(%rsp)
.LBB3_12:
	movl	-4(%rsp), %eax
	ret
.Ltmp13:
	.size	_Z9translatei, .Ltmp13-_Z9translatei
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI3_0:
	.quad	.LBB3_1
	.quad	.LBB3_2
	.quad	.LBB3_3
	.quad	.LBB3_4
	.quad	.LBB3_5
	.quad	.LBB3_6
	.quad	.LBB3_7
	.quad	.LBB3_8
	.quad	.LBB3_9
	.quad	.LBB3_10

	.text
	.globl	_ZN10translator9transformEv
	.align	16, 0x90
	.type	_ZN10translator9transformEv,@function
_ZN10translator9transformEv:            # @_ZN10translator9transformEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin4:
	.cfi_lsda 3, .Lexception4
# BB#0:
	pushq	%rbp
.Ltmp22:
	.cfi_def_cfa_offset 16
.Ltmp23:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp24:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
	addq	$208, %rax
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movslq	%ecx, %rax
	imulq	$1717986919, %rax, %rax # imm = 0x66666667
	sarq	$34, %rax
	movl	%eax, %edx
	movl	%edx, %esi
	shrl	$31, %esi
	addl	%esi, %edx
	imull	$10, %edx, %edx
	subl	%edx, %ecx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	%ecx, 656(%rax)
	movl	-12(%rbp), %ecx
	movslq	%ecx, %rdi
	imulq	$1717986919, %rdi, %rdi # imm = 0x66666667
	movq	%rdi, %r8
	shrq	$63, %r8
	movl	%r8d, %ecx
	sarq	$34, %rdi
	movl	%edi, %edx
	addl	%ecx, %edx
	movslq	%edx, %rdi
	imulq	$1717986919, %rdi, %rdi # imm = 0x66666667
	sarq	$34, %rdi
	movl	%edi, %ecx
	movl	%ecx, %esi
	shrl	$31, %esi
	addl	%esi, %ecx
	imull	$10, %ecx, %ecx
	subl	%ecx, %edx
	movl	%edx, 660(%rax)
	movl	-12(%rbp), %ecx
	movslq	%ecx, %rdi
	imulq	$1374389535, %rdi, %rdi # imm = 0x51EB851F
	movq	%rdi, %r8
	shrq	$63, %r8
	movl	%r8d, %ecx
	sarq	$37, %rdi
	movl	%edi, %edx
	addl	%ecx, %edx
	movslq	%edx, %rdi
	imulq	$1717986919, %rdi, %rdi # imm = 0x66666667
	sarq	$34, %rdi
	movl	%edi, %ecx
	movl	%ecx, %esi
	shrl	$31, %esi
	addl	%esi, %ecx
	imull	$10, %ecx, %ecx
	subl	%ecx, %edx
	movl	%edx, 664(%rax)
	movl	-12(%rbp), %ecx
	movslq	%ecx, %rdi
	imulq	$274877907, %rdi, %rdi  # imm = 0x10624DD3
	movq	%rdi, %r8
	shrq	$63, %r8
	movl	%r8d, %ecx
	sarq	$38, %rdi
	movl	%edi, %edx
	addl	%ecx, %edx
	movslq	%edx, %rdi
	imulq	$1717986919, %rdi, %rdi # imm = 0x66666667
	sarq	$34, %rdi
	movl	%edi, %ecx
	movl	%ecx, %esi
	shrl	$31, %esi
	addl	%esi, %ecx
	imull	$10, %ecx, %ecx
	subl	%ecx, %edx
	movl	%edx, 668(%rax)
	addq	$352, %rax              # imm = 0x160
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movl	%eax, %ecx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	%ecx, 652(%rax)
	addl	$-7, %ecx
	movl	%ecx, %edi
	cmpl	$7, %ecx
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	ja	.LBB4_5
# BB#11:
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	.LJTI4_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB4_1:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	656(%rax), %edi
	callq	_Z9translatei
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, 672(%rcx)
	jmp	.LBB4_5
.LBB4_2:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	660(%rax), %edi
	callq	_Z9translatei
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, 672(%rcx)
	jmp	.LBB4_5
.LBB4_3:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	664(%rax), %edi
	callq	_Z9translatei
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, 672(%rcx)
	jmp	.LBB4_5
.LBB4_4:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	668(%rax), %edi
	callq	_Z9translatei
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, 672(%rcx)
.LBB4_5:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$496, %rax              # imm = 0x1F0
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	672(%rcx), %esi
	leaq	-40(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi7EEC1Ei
.Ltmp14:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_
.Ltmp15:
	jmp	.LBB4_6
.LBB4_6:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi7EED1Ev
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB4_7:
.Ltmp16:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp17:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi7EED1Ev
.Ltmp18:
	jmp	.LBB4_8
.LBB4_8:
	jmp	.LBB4_9
.LBB4_9:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB4_10:
.Ltmp19:
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp25:
	.size	_ZN10translator9transformEv, .Ltmp25-_ZN10translator9transformEv
	.cfi_endproc
.Leh_func_end4:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table4:
.Lexception4:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset0 = .Leh_func_begin4-.Leh_func_begin4 # >> Call Site 1 <<
	.long	.Lset0
.Lset1 = .Ltmp14-.Leh_func_begin4       #   Call between .Leh_func_begin4 and .Ltmp14
	.long	.Lset1
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset2 = .Ltmp14-.Leh_func_begin4       # >> Call Site 2 <<
	.long	.Lset2
.Lset3 = .Ltmp15-.Ltmp14                #   Call between .Ltmp14 and .Ltmp15
	.long	.Lset3
.Lset4 = .Ltmp16-.Leh_func_begin4       #     jumps to .Ltmp16
	.long	.Lset4
	.byte	0                       #   On action: cleanup
.Lset5 = .Ltmp15-.Leh_func_begin4       # >> Call Site 3 <<
	.long	.Lset5
.Lset6 = .Ltmp17-.Ltmp15                #   Call between .Ltmp15 and .Ltmp17
	.long	.Lset6
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset7 = .Ltmp17-.Leh_func_begin4       # >> Call Site 4 <<
	.long	.Lset7
.Lset8 = .Ltmp18-.Ltmp17                #   Call between .Ltmp17 and .Ltmp18
	.long	.Lset8
.Lset9 = .Ltmp19-.Leh_func_begin4       #     jumps to .Ltmp19
	.long	.Lset9
	.byte	1                       #   On action: 1
.Lset10 = .Ltmp18-.Leh_func_begin4      # >> Call Site 5 <<
	.long	.Lset10
.Lset11 = .Leh_func_end4-.Ltmp18        #   Call between .Ltmp18 and .Leh_func_end4
	.long	.Lset11
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4
	.section	.rodata,"a",@progbits
	.align	8
.LJTI4_0:
	.quad	.LBB4_1
	.quad	.LBB4_5
	.quad	.LBB4_5
	.quad	.LBB4_5
	.quad	.LBB4_2
	.quad	.LBB4_5
	.quad	.LBB4_3
	.quad	.LBB4_4

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp28:
	.cfi_def_cfa_offset 16
.Ltmp29:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp30:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp31:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv, .Ltmp31-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi10EEEE4readEv
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_basecvyEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_basecvyEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_basecvyEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_basecvyEv,@function
_ZNK5sc_dt12sc_uint_basecvyEv:          # @_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp32:
	.size	_ZNK5sc_dt12sc_uint_basecvyEv, .Ltmp32-_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp35:
	.cfi_def_cfa_offset 16
.Ltmp36:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp37:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp38:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv, .Ltmp38-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp41:
	.cfi_def_cfa_offset 16
.Ltmp42:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp43:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv
	movq	%rax, %rsi
	addq	$8, %rsi
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp44:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_, .Ltmp44-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi7EEEE5writeERKS3_
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi7EEC1Ei,"axG",@progbits,_ZN5sc_dt7sc_uintILi7EEC1Ei,comdat
	.weak	_ZN5sc_dt7sc_uintILi7EEC1Ei
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi7EEC1Ei,@function
_ZN5sc_dt7sc_uintILi7EEC1Ei:            # @_ZN5sc_dt7sc_uintILi7EEC1Ei
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp47:
	.cfi_def_cfa_offset 16
.Ltmp48:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp49:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	_ZN5sc_dt7sc_uintILi7EEC2Ei
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp50:
	.size	_ZN5sc_dt7sc_uintILi7EEC1Ei, .Ltmp50-_ZN5sc_dt7sc_uintILi7EEC1Ei
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi7EED1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi7EED1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi7EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi7EED1Ev,@function
_ZN5sc_dt7sc_uintILi7EED1Ev:            # @_ZN5sc_dt7sc_uintILi7EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp53:
	.cfi_def_cfa_offset 16
.Ltmp54:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp55:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi7EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp56:
	.size	_ZN5sc_dt7sc_uintILi7EED1Ev, .Ltmp56-_ZN5sc_dt7sc_uintILi7EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD1Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD1Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD1Ev,@function
_ZN7sc_core18sc_process_monitorD1Ev:    # @_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp59:
	.cfi_def_cfa_offset 16
.Ltmp60:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp61:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core18sc_process_monitorD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp62:
	.size	_ZN7sc_core18sc_process_monitorD1Ev, .Ltmp62-_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD0Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD0Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD0Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD0Ev,@function
_ZN7sc_core18sc_process_monitorD0Ev:    # @_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin12:
	.cfi_lsda 3, .Lexception12
# BB#0:
	pushq	%rbp
.Ltmp68:
	.cfi_def_cfa_offset 16
.Ltmp69:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp70:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp63:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core18sc_process_monitorD1Ev
.Ltmp64:
	jmp	.LBB12_1
.LBB12_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB12_2:
.Ltmp65:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp71:
	.size	_ZN7sc_core18sc_process_monitorD0Ev, .Ltmp71-_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_endproc
.Leh_func_end12:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table12:
.Lexception12:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset12 = .Ltmp63-.Leh_func_begin12     # >> Call Site 1 <<
	.long	.Lset12
.Lset13 = .Ltmp64-.Ltmp63               #   Call between .Ltmp63 and .Ltmp64
	.long	.Lset13
.Lset14 = .Ltmp65-.Leh_func_begin12     #     jumps to .Ltmp65
	.long	.Lset14
	.byte	0                       #   On action: cleanup
.Lset15 = .Ltmp64-.Leh_func_begin12     # >> Call Site 2 <<
	.long	.Lset15
.Lset16 = .Leh_func_end12-.Ltmp64       #   Call between .Ltmp64 and .Leh_func_end12
	.long	.Lset16
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt7sc_uintILi7EEC2Ei,"axG",@progbits,_ZN5sc_dt7sc_uintILi7EEC2Ei,comdat
	.weak	_ZN5sc_dt7sc_uintILi7EEC2Ei
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi7EEC2Ei,@function
_ZN5sc_dt7sc_uintILi7EEC2Ei:            # @_ZN5sc_dt7sc_uintILi7EEC2Ei
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin13:
	.cfi_lsda 3, .Lexception13
# BB#0:
	pushq	%rbp
.Ltmp80:
	.cfi_def_cfa_offset 16
.Ltmp81:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp82:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	$7, %esi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt7sc_uintILi7EEE+16, (%rdi)
	movl	-12(%rbp), %esi
.Ltmp72:
	callq	_ZN5sc_dt12sc_uint_baseaSEi
.Ltmp73:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB13_1
.LBB13_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB13_2:
.Ltmp74:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp75:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
.Ltmp76:
	jmp	.LBB13_3
.LBB13_3:
	jmp	.LBB13_4
.LBB13_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB13_5:
.Ltmp77:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp83:
	.size	_ZN5sc_dt7sc_uintILi7EEC2Ei, .Ltmp83-_ZN5sc_dt7sc_uintILi7EEC2Ei
	.cfi_endproc
.Leh_func_end13:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table13:
.Lexception13:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset17 = .Leh_func_begin13-.Leh_func_begin13 # >> Call Site 1 <<
	.long	.Lset17
.Lset18 = .Ltmp72-.Leh_func_begin13     #   Call between .Leh_func_begin13 and .Ltmp72
	.long	.Lset18
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset19 = .Ltmp72-.Leh_func_begin13     # >> Call Site 2 <<
	.long	.Lset19
.Lset20 = .Ltmp73-.Ltmp72               #   Call between .Ltmp72 and .Ltmp73
	.long	.Lset20
.Lset21 = .Ltmp74-.Leh_func_begin13     #     jumps to .Ltmp74
	.long	.Lset21
	.byte	0                       #   On action: cleanup
.Lset22 = .Ltmp75-.Leh_func_begin13     # >> Call Site 3 <<
	.long	.Lset22
.Lset23 = .Ltmp76-.Ltmp75               #   Call between .Ltmp75 and .Ltmp76
	.long	.Lset23
.Lset24 = .Ltmp77-.Leh_func_begin13     #     jumps to .Ltmp77
	.long	.Lset24
	.byte	1                       #   On action: 1
.Lset25 = .Ltmp76-.Leh_func_begin13     # >> Call Site 4 <<
	.long	.Lset25
.Lset26 = .Leh_func_end13-.Ltmp76       #   Call between .Ltmp76 and .Leh_func_end13
	.long	.Lset26
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseC2Ei,"axG",@progbits,_ZN5sc_dt12sc_uint_baseC2Ei,comdat
	.weak	_ZN5sc_dt12sc_uint_baseC2Ei
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseC2Ei,@function
_ZN5sc_dt12sc_uint_baseC2Ei:            # @_ZN5sc_dt12sc_uint_baseC2Ei
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin14:
	.cfi_lsda 3, .Lexception14
# BB#0:
	pushq	%rbp
.Ltmp92:
	.cfi_def_cfa_offset 16
.Ltmp93:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp94:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt13sc_value_baseC2Ev
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt12sc_uint_baseE+16, (%rdi)
	movq	$0, 8(%rdi)
	movl	-12(%rbp), %esi
	movl	%esi, 16(%rdi)
	movl	$64, %eax
	subl	%esi, %eax
	movl	%eax, 20(%rdi)
.Ltmp84:
	callq	_ZNK5sc_dt12sc_uint_base12check_lengthEv
.Ltmp85:
	jmp	.LBB14_1
.LBB14_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB14_2:
.Ltmp86:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp87:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt13sc_value_baseD2Ev
.Ltmp88:
	jmp	.LBB14_3
.LBB14_3:
	jmp	.LBB14_4
.LBB14_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB14_5:
.Ltmp89:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp95:
	.size	_ZN5sc_dt12sc_uint_baseC2Ei, .Ltmp95-_ZN5sc_dt12sc_uint_baseC2Ei
	.cfi_endproc
.Leh_func_end14:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table14:
.Lexception14:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset27 = .Ltmp84-.Leh_func_begin14     # >> Call Site 1 <<
	.long	.Lset27
.Lset28 = .Ltmp85-.Ltmp84               #   Call between .Ltmp84 and .Ltmp85
	.long	.Lset28
.Lset29 = .Ltmp86-.Leh_func_begin14     #     jumps to .Ltmp86
	.long	.Lset29
	.byte	0                       #   On action: cleanup
.Lset30 = .Ltmp87-.Leh_func_begin14     # >> Call Site 2 <<
	.long	.Lset30
.Lset31 = .Ltmp88-.Ltmp87               #   Call between .Ltmp87 and .Ltmp88
	.long	.Lset31
.Lset32 = .Ltmp89-.Leh_func_begin14     #     jumps to .Ltmp89
	.long	.Lset32
	.byte	1                       #   On action: 1
.Lset33 = .Ltmp88-.Leh_func_begin14     # >> Call Site 3 <<
	.long	.Lset33
.Lset34 = .Leh_func_end14-.Ltmp88       #   Call between .Ltmp88 and .Leh_func_end14
	.long	.Lset34
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseaSEi,"axG",@progbits,_ZN5sc_dt12sc_uint_baseaSEi,comdat
	.weak	_ZN5sc_dt12sc_uint_baseaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseaSEi,@function
_ZN5sc_dt12sc_uint_baseaSEi:            # @_ZN5sc_dt12sc_uint_baseaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp98:
	.cfi_def_cfa_offset 16
.Ltmp99:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp100:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movslq	-12(%rbp), %rax
	movq	%rax, 8(%rdi)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp101:
	.size	_ZN5sc_dt12sc_uint_baseaSEi, .Ltmp101-_ZN5sc_dt12sc_uint_baseaSEi
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_baseD2Ev,"axG",@progbits,_ZN5sc_dt12sc_uint_baseD2Ev,comdat
	.weak	_ZN5sc_dt12sc_uint_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseD2Ev,@function
_ZN5sc_dt12sc_uint_baseD2Ev:            # @_ZN5sc_dt12sc_uint_baseD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp104:
	.cfi_def_cfa_offset 16
.Ltmp105:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp106:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt13sc_value_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp107:
	.size	_ZN5sc_dt12sc_uint_baseD2Ev, .Ltmp107-_ZN5sc_dt12sc_uint_baseD2Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,"axG",@progbits,_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,comdat
	.weak	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,@function
_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev: # @_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp108:
	.size	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev, .Ltmp108-_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base13concat_lengthEPb,"axG",@progbits,_ZNK5sc_dt12sc_uint_base13concat_lengthEPb,comdat
	.weak	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb,@function
_ZNK5sc_dt12sc_uint_base13concat_lengthEPb: # @_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp111:
	.cfi_def_cfa_offset 16
.Ltmp112:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp113:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, -16(%rbp)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	je	.LBB18_2
# BB#1:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
.LBB18_2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt12sc_uint_base6lengthEv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp114:
	.size	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb, .Ltmp114-_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi7EED0Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi7EED0Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi7EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi7EED0Ev,@function
_ZN5sc_dt7sc_uintILi7EED0Ev:            # @_ZN5sc_dt7sc_uintILi7EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin19:
	.cfi_lsda 3, .Lexception19
# BB#0:
	pushq	%rbp
.Ltmp120:
	.cfi_def_cfa_offset 16
.Ltmp121:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp122:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp115:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi7EED1Ev
.Ltmp116:
	jmp	.LBB19_1
.LBB19_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB19_2:
.Ltmp117:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp123:
	.size	_ZN5sc_dt7sc_uintILi7EED0Ev, .Ltmp123-_ZN5sc_dt7sc_uintILi7EED0Ev
	.cfi_endproc
.Leh_func_end19:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table19:
.Lexception19:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset35 = .Ltmp115-.Leh_func_begin19    # >> Call Site 1 <<
	.long	.Lset35
.Lset36 = .Ltmp116-.Ltmp115             #   Call between .Ltmp115 and .Ltmp116
	.long	.Lset36
.Lset37 = .Ltmp117-.Leh_func_begin19    #     jumps to .Ltmp117
	.long	.Lset37
	.byte	0                       #   On action: cleanup
.Lset38 = .Ltmp116-.Leh_func_begin19    # >> Call Site 2 <<
	.long	.Lset38
.Lset39 = .Leh_func_end19-.Ltmp116      #   Call between .Ltmp116 and .Leh_func_end19
	.long	.Lset39
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK5sc_dt12sc_uint_base6lengthEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_base6lengthEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_base6lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base6lengthEv,@function
_ZNK5sc_dt12sc_uint_base6lengthEv:      # @_ZNK5sc_dt12sc_uint_base6lengthEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movl	16(%rdi), %eax
	ret
.Ltmp124:
	.size	_ZNK5sc_dt12sc_uint_base6lengthEv, .Ltmp124-_ZNK5sc_dt12sc_uint_base6lengthEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseD2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseD2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseD2Ev,@function
_ZN5sc_dt13sc_value_baseD2Ev:           # @_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp125:
	.size	_ZN5sc_dt13sc_value_baseD2Ev, .Ltmp125-_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_base11extend_signEv,"axG",@progbits,_ZN5sc_dt12sc_uint_base11extend_signEv,comdat
	.weak	_ZN5sc_dt12sc_uint_base11extend_signEv
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_base11extend_signEv,@function
_ZN5sc_dt12sc_uint_base11extend_signEv: # @_ZN5sc_dt12sc_uint_base11extend_signEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	_ZN5sc_dt9UINT_ZEROE, %rax
	xorq	$-1, %rax
	movl	20(%rdi), %ecx
                                        # kill: CL<def> RCX<kill>
	shrq	%cl, %rax
	movq	8(%rdi), %rdx
	andq	%rax, %rdx
	movq	%rdx, 8(%rdi)
	ret
.Ltmp126:
	.size	_ZN5sc_dt12sc_uint_base11extend_signEv, .Ltmp126-_ZN5sc_dt12sc_uint_base11extend_signEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseC2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseC2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseC2Ev,@function
_ZN5sc_dt13sc_value_baseC2Ev:           # @_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_startproc
# BB#0:
	leaq	_ZTVN5sc_dt13sc_value_baseE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rax, (%rdi)
	ret
.Ltmp127:
	.size	_ZN5sc_dt13sc_value_baseC2Ev, .Ltmp127-_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base12check_lengthEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_base12check_lengthEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base12check_lengthEv,@function
_ZNK5sc_dt12sc_uint_base12check_lengthEv: # @_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp130:
	.cfi_def_cfa_offset 16
.Ltmp131:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp132:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 16(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jle	.LBB24_2
# BB#1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	cmpl	$64, 16(%rax)
	jle	.LBB24_3
.LBB24_2:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt12sc_uint_base14invalid_lengthEv
.LBB24_3:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp133:
	.size	_ZNK5sc_dt12sc_uint_base12check_lengthEv, .Ltmp133-_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp136:
	.cfi_def_cfa_offset 16
.Ltmp137:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp138:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB25_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB25_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp139:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv, .Ltmp139-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi7EEEEEEptEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp142:
	.cfi_def_cfa_offset 16
.Ltmp143:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp144:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB26_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB26_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp145:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv, .Ltmp145-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp148:
	.cfi_def_cfa_offset 16
.Ltmp149:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp150:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB27_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB27_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp151:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv, .Ltmp151-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi10EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD2Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD2Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD2Ev,@function
_ZN7sc_core18sc_process_monitorD2Ev:    # @_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp152:
	.size	_ZN7sc_core18sc_process_monitorD2Ev, .Ltmp152-_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi7EED2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi7EED2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi7EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi7EED2Ev,@function
_ZN5sc_dt7sc_uintILi7EED2Ev:            # @_ZN5sc_dt7sc_uintILi7EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp155:
	.cfi_def_cfa_offset 16
.Ltmp156:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp157:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp158:
	.size	_ZN5sc_dt7sc_uintILi7EED2Ev, .Ltmp158-_ZN5sc_dt7sc_uintILi7EED2Ev
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	_GLOBAL__I_a,@function
_GLOBAL__I_a:                           # @_GLOBAL__I_a
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp161:
	.cfi_def_cfa_offset 16
.Ltmp162:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp163:
	.cfi_def_cfa_register %rbp
	callq	__cxx_global_var_init
	callq	__cxx_global_var_init1
	popq	%rbp
	ret
.Ltmp164:
	.size	_GLOBAL__I_a, .Ltmp164-_GLOBAL__I_a
	.cfi_endproc

	.type	_ZStL8__ioinit,@object  # @_ZStL8__ioinit
	.local	_ZStL8__ioinit
	.comm	_ZStL8__ioinit,1,1
	.type	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE,@object # @_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE
	.section	.rodata,"a",@progbits
_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE:
	.byte	1                       # 0x1
	.size	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE, 1

	.type	_ZN7sc_coreL17api_version_checkE,@object # @_ZN7sc_coreL17api_version_checkE
	.local	_ZN7sc_coreL17api_version_checkE
	.comm	_ZN7sc_coreL17api_version_checkE,1,1
	.type	_ZTVN7sc_core18sc_process_monitorE,@object # @_ZTVN7sc_core18sc_process_monitorE
	.section	.rodata._ZTVN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTVN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTVN7sc_core18sc_process_monitorE
	.align	16
_ZTVN7sc_core18sc_process_monitorE:
	.quad	0
	.quad	_ZTIN7sc_core18sc_process_monitorE
	.quad	_ZN7sc_core18sc_process_monitorD1Ev
	.quad	_ZN7sc_core18sc_process_monitorD0Ev
	.quad	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.size	_ZTVN7sc_core18sc_process_monitorE, 40

	.type	_ZTSN7sc_core18sc_process_monitorE,@object # @_ZTSN7sc_core18sc_process_monitorE
	.section	.rodata._ZTSN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTSN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTSN7sc_core18sc_process_monitorE
	.align	16
_ZTSN7sc_core18sc_process_monitorE:
	.asciz	 "N7sc_core18sc_process_monitorE"
	.size	_ZTSN7sc_core18sc_process_monitorE, 31

	.type	_ZTIN7sc_core18sc_process_monitorE,@object # @_ZTIN7sc_core18sc_process_monitorE
	.section	.rodata._ZTIN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTIN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTIN7sc_core18sc_process_monitorE
	.align	8
_ZTIN7sc_core18sc_process_monitorE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_process_monitorE
	.size	_ZTIN7sc_core18sc_process_monitorE, 16

	.type	_ZTVN5sc_dt7sc_uintILi7EEE,@object # @_ZTVN5sc_dt7sc_uintILi7EEE
	.section	.rodata._ZTVN5sc_dt7sc_uintILi7EEE,"aG",@progbits,_ZTVN5sc_dt7sc_uintILi7EEE,comdat
	.weak	_ZTVN5sc_dt7sc_uintILi7EEE
	.align	16
_ZTVN5sc_dt7sc_uintILi7EEE:
	.quad	0
	.quad	_ZTIN5sc_dt7sc_uintILi7EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.quad	_ZN5sc_dt12sc_uint_base10concat_setExi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setEyi
	.quad	_ZN5sc_dt7sc_uintILi7EED1Ev
	.quad	_ZN5sc_dt7sc_uintILi7EED0Ev
	.size	_ZTVN5sc_dt7sc_uintILi7EEE, 104

	.type	_ZTSN5sc_dt7sc_uintILi7EEE,@object # @_ZTSN5sc_dt7sc_uintILi7EEE
	.section	.rodata._ZTSN5sc_dt7sc_uintILi7EEE,"aG",@progbits,_ZTSN5sc_dt7sc_uintILi7EEE,comdat
	.weak	_ZTSN5sc_dt7sc_uintILi7EEE
	.align	16
_ZTSN5sc_dt7sc_uintILi7EEE:
	.asciz	 "N5sc_dt7sc_uintILi7EEE"
	.size	_ZTSN5sc_dt7sc_uintILi7EEE, 23

	.type	_ZTIN5sc_dt7sc_uintILi7EEE,@object # @_ZTIN5sc_dt7sc_uintILi7EEE
	.section	.rodata._ZTIN5sc_dt7sc_uintILi7EEE,"aG",@progbits,_ZTIN5sc_dt7sc_uintILi7EEE,comdat
	.weak	_ZTIN5sc_dt7sc_uintILi7EEE
	.align	16
_ZTIN5sc_dt7sc_uintILi7EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt7sc_uintILi7EEE
	.quad	_ZTIN5sc_dt12sc_uint_baseE
	.size	_ZTIN5sc_dt7sc_uintILi7EEE, 24

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	 "port is not bound"
	.size	.L.str, 18

	.section	.ctors,"aw",@progbits
	.align	8
	.quad	_GLOBAL__I_a

	.section	".note.GNU-stack","",@progbits
