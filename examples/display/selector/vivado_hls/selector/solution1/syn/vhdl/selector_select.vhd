-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity selector_select is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    start : IN STD_LOGIC;
    selected : OUT STD_LOGIC_VECTOR (3 downto 0);
    selected_ap_vld : OUT STD_LOGIC;
    selector_counter : OUT STD_LOGIC_VECTOR (31 downto 0);
    selector_counter_ap_vld : OUT STD_LOGIC );
end;


architecture behav of selector_select is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tmp_read_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_151 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal selector_counter_loa_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal selector_counter_loa_1_load_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_123_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_condition_112 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    selector_counter_loa_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1))) then 
                selector_counter_loa_fu_78 <= tmp_1_fu_116_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_151 = ap_const_lv1_1)))) then 
                selector_counter_loa_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1))) then
                icmp_reg_158 <= icmp_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_reg_151 <= (0=>start, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_condition_112_assign_proc : process(selector_counter_loa_1_load_fu_113_p1)
    begin
                ap_condition_112 <= (not((ap_const_lv32_0 = selector_counter_loa_1_load_fu_113_p1)) and not((ap_const_lv32_1 = selector_counter_loa_1_load_fu_113_p1)) and not((ap_const_lv32_2 = selector_counter_loa_1_load_fu_113_p1)) and not((ap_const_lv32_3 = selector_counter_loa_1_load_fu_113_p1)));
    end process;

    icmp_fu_133_p2 <= "1" when (signed(tmp_2_fu_123_p4) > signed(ap_const_lv30_0)) else "0";

    selected_assign_proc : process(tmp_read_fu_98_p2, ap_CS_fsm_state3, selector_counter_loa_1_load_fu_113_p1, ap_condition_112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1))) then
            if ((ap_condition_112 = ap_const_boolean_1)) then 
                selected <= ap_const_lv4_F;
            elsif ((ap_const_lv32_0 = selector_counter_loa_1_load_fu_113_p1)) then 
                selected <= ap_const_lv4_7;
            elsif ((ap_const_lv32_1 = selector_counter_loa_1_load_fu_113_p1)) then 
                selected <= ap_const_lv4_B;
            elsif ((ap_const_lv32_2 = selector_counter_loa_1_load_fu_113_p1)) then 
                selected <= ap_const_lv4_D;
            elsif ((ap_const_lv32_3 = selector_counter_loa_1_load_fu_113_p1)) then 
                selected <= ap_const_lv4_E;
            else 
                selected <= "XXXX";
            end if;
        else 
            selected <= "XXXX";
        end if; 
    end process;


    selected_ap_vld_assign_proc : process(tmp_read_fu_98_p2, ap_CS_fsm_state3, selector_counter_loa_1_load_fu_113_p1)
    begin
        if (((not((ap_const_lv32_0 = selector_counter_loa_1_load_fu_113_p1)) and not((ap_const_lv32_1 = selector_counter_loa_1_load_fu_113_p1)) and not((ap_const_lv32_2 = selector_counter_loa_1_load_fu_113_p1)) and not((ap_const_lv32_3 = selector_counter_loa_1_load_fu_113_p1)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1)) or ((ap_const_lv32_0 = selector_counter_loa_1_load_fu_113_p1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1)) or ((ap_const_lv32_1 = selector_counter_loa_1_load_fu_113_p1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1)) or ((ap_const_lv32_2 = selector_counter_loa_1_load_fu_113_p1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1)) or ((ap_const_lv32_3 = selector_counter_loa_1_load_fu_113_p1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1)))) then 
            selected_ap_vld <= ap_const_logic_1;
        else 
            selected_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    selector_counter_assign_proc : process(tmp_read_fu_98_p2, tmp_reg_151, ap_CS_fsm_state3, icmp_reg_158, tmp_1_fu_116_p2, ap_CS_fsm_state4)
    begin
        if (((icmp_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_151 = ap_const_lv1_1))) then 
            selector_counter <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1))) then 
            selector_counter <= tmp_1_fu_116_p2;
        else 
            selector_counter <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    selector_counter_ap_vld_assign_proc : process(tmp_read_fu_98_p2, tmp_reg_151, ap_CS_fsm_state3, icmp_reg_158, ap_CS_fsm_state4)
    begin
        if ((((icmp_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_151 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_read_fu_98_p2 = ap_const_lv1_1)))) then 
            selector_counter_ap_vld <= ap_const_logic_1;
        else 
            selector_counter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    selector_counter_loa_1_load_fu_113_p1 <= selector_counter_loa_fu_78;
    tmp_1_fu_116_p2 <= std_logic_vector(unsigned(selector_counter_loa_fu_78) + unsigned(ap_const_lv32_1));
    tmp_2_fu_123_p4 <= tmp_1_fu_116_p2(31 downto 2);
    tmp_read_fu_98_p2 <= (0=>start, others=>'-');
end behav;
