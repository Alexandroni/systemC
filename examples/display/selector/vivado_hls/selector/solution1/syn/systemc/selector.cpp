// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "selector.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic selector::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> selector::ap_const_lv32_1 = "1";
const sc_lv<4> selector::ap_const_lv4_F = "1111";
const sc_lv<2> selector::ap_const_lv2_0 = "00";
const sc_logic selector::ap_const_logic_0 = sc_dt::Log_0;
const bool selector::ap_const_boolean_1 = true;

selector::selector(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_selector_select_fu_48 = new selector_select("grp_selector_select_fu_48");
    grp_selector_select_fu_48->ap_clk(clk);
    grp_selector_select_fu_48->ap_rst(reset);
    grp_selector_select_fu_48->start(start);
    grp_selector_select_fu_48->selected(grp_selector_select_fu_48_selected);
    grp_selector_select_fu_48->selected_ap_vld(grp_selector_select_fu_48_selected_ap_vld);
    grp_selector_select_fu_48->selector_counter(grp_selector_select_fu_48_selector_counter);
    grp_selector_select_fu_48->selector_counter_ap_vld(grp_selector_select_fu_48_selector_counter_ap_vld);

    SC_METHOD(thread_selected);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clk.pos() );

    selected.initialize("1111");
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "selector_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, start, "(port)start");
    sc_trace(mVcdFile, selected, "(port)selected");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_selector_select_fu_48_selected, "grp_selector_select_fu_48_selected");
    sc_trace(mVcdFile, grp_selector_select_fu_48_selected_ap_vld, "grp_selector_select_fu_48_selected_ap_vld");
    sc_trace(mVcdFile, grp_selector_select_fu_48_selector_counter, "grp_selector_select_fu_48_selector_counter");
    sc_trace(mVcdFile, grp_selector_select_fu_48_selector_counter_ap_vld, "grp_selector_select_fu_48_selector_counter_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
#endif

    }
    mHdltvinHandle.open("selector.hdltvin.dat");
    mHdltvoutHandle.open("selector.hdltvout.dat");
}

selector::~selector() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_selector_select_fu_48;
}

void selector::thread_selected() {
    if ( reset.read() == ap_const_logic_1) {
        selected = ap_const_lv4_F;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, grp_selector_select_fu_48_selected_ap_vld.read())) {
            selected = grp_selector_select_fu_48_selected.read();
        }
    }
}

void selector::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void selector::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void selector::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"start\" :  \"" << start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"selected\" :  \"" << selected.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

