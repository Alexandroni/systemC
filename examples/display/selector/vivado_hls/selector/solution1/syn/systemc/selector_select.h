// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _selector_select_HH_
#define _selector_select_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct selector_select : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > start;
    sc_out< sc_lv<4> > selected;
    sc_out< sc_logic > selected_ap_vld;
    sc_out< sc_lv<32> > selector_counter;
    sc_out< sc_logic > selector_counter_ap_vld;


    // Module declarations
    selector_select(sc_module_name name);
    SC_HAS_PROCESS(selector_select);

    ~selector_select();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > tmp_read_fu_98_p2;
    sc_signal< sc_lv<1> > tmp_reg_151;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_fu_133_p2;
    sc_signal< sc_lv<1> > icmp_reg_158;
    sc_signal< sc_lv<32> > selector_counter_loa_fu_78;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > tmp_1_fu_116_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > selector_counter_loa_1_load_fu_113_p1;
    sc_signal< sc_lv<30> > tmp_2_fu_123_p4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< bool > ap_condition_112;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<30> ap_const_lv30_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_condition_112();
    void thread_icmp_fu_133_p2();
    void thread_selected();
    void thread_selected_ap_vld();
    void thread_selector_counter();
    void thread_selector_counter_ap_vld();
    void thread_selector_counter_loa_1_load_fu_113_p1();
    void thread_tmp_1_fu_116_p2();
    void thread_tmp_2_fu_123_p4();
    void thread_tmp_read_fu_98_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
