// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "selector_select.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic selector_select::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic selector_select::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> selector_select::ap_ST_fsm_state1 = "1";
const sc_lv<4> selector_select::ap_ST_fsm_state2 = "10";
const sc_lv<4> selector_select::ap_ST_fsm_state3 = "100";
const sc_lv<4> selector_select::ap_ST_fsm_state4 = "1000";
const sc_lv<32> selector_select::ap_const_lv32_2 = "10";
const sc_lv<1> selector_select::ap_const_lv1_1 = "1";
const sc_lv<32> selector_select::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> selector_select::ap_const_lv32_1 = "1";
const sc_lv<1> selector_select::ap_const_lv1_0 = "0";
const sc_lv<32> selector_select::ap_const_lv32_3 = "11";
const sc_lv<4> selector_select::ap_const_lv4_E = "1110";
const sc_lv<4> selector_select::ap_const_lv4_D = "1101";
const sc_lv<4> selector_select::ap_const_lv4_B = "1011";
const sc_lv<4> selector_select::ap_const_lv4_7 = "111";
const sc_lv<4> selector_select::ap_const_lv4_F = "1111";
const sc_lv<32> selector_select::ap_const_lv32_1F = "11111";
const sc_lv<30> selector_select::ap_const_lv30_0 = "000000000000000000000000000000";
const bool selector_select::ap_const_boolean_1 = true;

selector_select::selector_select(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_112);
    sensitive << ( selector_counter_loa_1_load_fu_113_p1 );

    SC_METHOD(thread_icmp_fu_133_p2);
    sensitive << ( tmp_read_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_123_p4 );

    SC_METHOD(thread_selected);
    sensitive << ( tmp_read_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( selector_counter_loa_1_load_fu_113_p1 );
    sensitive << ( ap_condition_112 );

    SC_METHOD(thread_selected_ap_vld);
    sensitive << ( tmp_read_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( selector_counter_loa_1_load_fu_113_p1 );

    SC_METHOD(thread_selector_counter);
    sensitive << ( tmp_read_fu_98_p2 );
    sensitive << ( tmp_reg_151 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_reg_158 );
    sensitive << ( tmp_1_fu_116_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_selector_counter_ap_vld);
    sensitive << ( tmp_read_fu_98_p2 );
    sensitive << ( tmp_reg_151 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_reg_158 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_selector_counter_loa_1_load_fu_113_p1);
    sensitive << ( tmp_read_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( selector_counter_loa_fu_78 );

    SC_METHOD(thread_tmp_1_fu_116_p2);
    sensitive << ( selector_counter_loa_fu_78 );

    SC_METHOD(thread_tmp_2_fu_123_p4);
    sensitive << ( tmp_1_fu_116_p2 );

    SC_METHOD(thread_tmp_read_fu_98_p2);
    sensitive << ( start );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "selector_select_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, start, "(port)start");
    sc_trace(mVcdFile, selected, "(port)selected");
    sc_trace(mVcdFile, selected_ap_vld, "(port)selected_ap_vld");
    sc_trace(mVcdFile, selector_counter, "(port)selector_counter");
    sc_trace(mVcdFile, selector_counter_ap_vld, "(port)selector_counter_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_read_fu_98_p2, "tmp_read_fu_98_p2");
    sc_trace(mVcdFile, tmp_reg_151, "tmp_reg_151");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_fu_133_p2, "icmp_fu_133_p2");
    sc_trace(mVcdFile, icmp_reg_158, "icmp_reg_158");
    sc_trace(mVcdFile, selector_counter_loa_fu_78, "selector_counter_loa_fu_78");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_116_p2, "tmp_1_fu_116_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, selector_counter_loa_1_load_fu_113_p1, "selector_counter_loa_1_load_fu_113_p1");
    sc_trace(mVcdFile, tmp_2_fu_123_p4, "tmp_2_fu_123_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_112, "ap_condition_112");
#endif

    }
}

selector_select::~selector_select() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void selector_select::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_fu_133_p2.read(), ap_const_lv1_0))) {
        selector_counter_loa_fu_78 = tmp_1_fu_116_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(tmp_reg_151.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(icmp_reg_158.read(), ap_const_lv1_1)))) {
        selector_counter_loa_fu_78 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1))) {
        icmp_reg_158 = icmp_fu_133_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_reg_151 =  (sc_lv<1>) (start.read());
    }
}

void selector_select::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void selector_select::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void selector_select::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void selector_select::thread_ap_condition_112() {
    ap_condition_112 = (!esl_seteq<1,32,32>(ap_const_lv32_0, selector_counter_loa_1_load_fu_113_p1.read()) && !esl_seteq<1,32,32>(ap_const_lv32_1, selector_counter_loa_1_load_fu_113_p1.read()) && !esl_seteq<1,32,32>(ap_const_lv32_2, selector_counter_loa_1_load_fu_113_p1.read()) && !esl_seteq<1,32,32>(ap_const_lv32_3, selector_counter_loa_1_load_fu_113_p1.read()));
}

void selector_select::thread_icmp_fu_133_p2() {
    icmp_fu_133_p2 = (!tmp_2_fu_123_p4.read().is_01() || !ap_const_lv30_0.is_01())? sc_lv<1>(): (sc_bigint<30>(tmp_2_fu_123_p4.read()) > sc_bigint<30>(ap_const_lv30_0));
}

void selector_select::thread_selected() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1))) {
        if (esl_seteq<1,1,1>(ap_condition_112.read(), ap_const_boolean_1)) {
            selected = ap_const_lv4_F;
        } else if (esl_seteq<1,32,32>(ap_const_lv32_0, selector_counter_loa_1_load_fu_113_p1.read())) {
            selected = ap_const_lv4_7;
        } else if (esl_seteq<1,32,32>(ap_const_lv32_1, selector_counter_loa_1_load_fu_113_p1.read())) {
            selected = ap_const_lv4_B;
        } else if (esl_seteq<1,32,32>(ap_const_lv32_2, selector_counter_loa_1_load_fu_113_p1.read())) {
            selected = ap_const_lv4_D;
        } else if (esl_seteq<1,32,32>(ap_const_lv32_3, selector_counter_loa_1_load_fu_113_p1.read())) {
            selected = ap_const_lv4_E;
        } else {
            selected = "XXXX";
        }
    } else {
        selected = "XXXX";
    }
}

void selector_select::thread_selected_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,32,32>(ap_const_lv32_3, selector_counter_loa_1_load_fu_113_p1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,32,32>(ap_const_lv32_2, selector_counter_loa_1_load_fu_113_p1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,32,32>(ap_const_lv32_1, selector_counter_loa_1_load_fu_113_p1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,32,32>(ap_const_lv32_0, selector_counter_loa_1_load_fu_113_p1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1) && 
          !esl_seteq<1,32,32>(ap_const_lv32_0, selector_counter_loa_1_load_fu_113_p1.read()) && 
          !esl_seteq<1,32,32>(ap_const_lv32_1, selector_counter_loa_1_load_fu_113_p1.read()) && 
          !esl_seteq<1,32,32>(ap_const_lv32_2, selector_counter_loa_1_load_fu_113_p1.read()) && 
          !esl_seteq<1,32,32>(ap_const_lv32_3, selector_counter_loa_1_load_fu_113_p1.read())))) {
        selected_ap_vld = ap_const_logic_1;
    } else {
        selected_ap_vld = ap_const_logic_0;
    }
}

void selector_select::thread_selector_counter() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_reg_151.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_reg_158.read(), ap_const_lv1_1))) {
        selector_counter = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1))) {
        selector_counter = tmp_1_fu_116_p2.read();
    } else {
        selector_counter =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void selector_select::thread_selector_counter_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_read_fu_98_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_reg_151.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(icmp_reg_158.read(), ap_const_lv1_1)))) {
        selector_counter_ap_vld = ap_const_logic_1;
    } else {
        selector_counter_ap_vld = ap_const_logic_0;
    }
}

void selector_select::thread_selector_counter_loa_1_load_fu_113_p1() {
    selector_counter_loa_1_load_fu_113_p1 = selector_counter_loa_fu_78.read();
}

void selector_select::thread_tmp_1_fu_116_p2() {
    tmp_1_fu_116_p2 = (!selector_counter_loa_fu_78.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(selector_counter_loa_fu_78.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void selector_select::thread_tmp_2_fu_123_p4() {
    tmp_2_fu_123_p4 = tmp_1_fu_116_p2.read().range(31, 2);
}

void selector_select::thread_tmp_read_fu_98_p2() {
    tmp_read_fu_98_p2 =  (sc_lv<1>) (start.read());
}

void selector_select::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

